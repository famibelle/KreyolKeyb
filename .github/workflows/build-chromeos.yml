name: 🖥️ Build ChromeOS Compatible Keyboard

permissions:
  contents: write
  packages: write

on:
  push:
    branches: 
      - feature/chromeos-support
      - main
    paths:
      - 'android_keyboard/**'
      - '.github/workflows/**'
    tags:
      - 'v*-chromeos'
  pull_request:
    branches: [ main ]
    paths:
      - 'android_keyboard/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type de build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - apk-only
          - aab-only

jobs:
  # 🖥️ ÉTAPE 1 : VÉRIFICATION COMPATIBILITÉ CHROMEOS
  verify-chromeos-config:
    name: 🔍 Verify ChromeOS Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: 🔍 Verify AndroidManifest ChromeOS Features
      run: |
        echo "🔍 Vérification configuration ChromeOS..."
        
        MANIFEST="android_keyboard/app/src/main/AndroidManifest.xml"
        
        # Vérifier les fonctionnalités optionnelles
        if grep -q 'android.hardware.type.pc' "$MANIFEST"; then
          echo "✅ ChromeOS type.pc feature déclaré"
        else
          echo "❌ ERREUR: android.hardware.type.pc manquant"
          exit 1
        fi
        
        # Vérifier resizable activity
        if grep -q 'resizeableActivity.*true' "$MANIFEST"; then
          echo "✅ resizeableActivity activé"
        else
          echo "⚠️ WARNING: resizeableActivity pas explicitement activé"
        fi
        
        # Vérifier multi-window
        if grep -q 'allow_multiple_resumed_activities' "$MANIFEST"; then
          echo "✅ Multi-window support activé"
        else
          echo "⚠️ WARNING: Multi-window support manquant"
        fi
        
        echo ""
        echo "📊 RÉSUMÉ CONFIGURATION CHROMEOS:"
        echo "================================"
        grep -E '(type.pc|resizeableActivity|allow_multiple_resumed_activities|max_aspect)' "$MANIFEST" || echo "Configuration à vérifier"

    - name: 🔍 Verify build.gradle ChromeOS Architectures
      run: |
        echo "🔍 Vérification architectures x86/x86_64..."
        
        BUILD_GRADLE="android_keyboard/app/build.gradle"
        
        # Vérifier x86 et x86_64
        if grep -q "x86" "$BUILD_GRADLE" && grep -q "x86_64" "$BUILD_GRADLE"; then
          echo "✅ Architectures x86/x86_64 configurées"
          echo ""
          echo "📊 Configuration NDK:"
          grep -A 3 "abiFilters" "$BUILD_GRADLE" || echo "abiFilters non trouvé"
        else
          echo "❌ ERREUR: Architectures x86/x86_64 manquantes"
          echo "Configuration actuelle:"
          grep -A 3 "ndk" "$BUILD_GRADLE" || echo "Section ndk non trouvée"
          exit 1
        fi
        
        echo ""
        echo "✅ Configuration ChromeOS validée!"

  # 🔧 ÉTAPE 2A : BUILD DEBUG APK (avec x86/x86_64)
  build-chromeos-debug-apk:
    name: 🔧 Build ChromeOS Debug APK
    runs-on: ubuntu-latest
    needs: verify-chromeos-config
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🔧 Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: 🧹 Clean Project
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle clean --no-daemon --scan

    - name: 🔨 Build ChromeOS Debug APK (4 architectures)
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: |
        cd android_keyboard
        echo "🏗️ Building APK avec support ChromeOS..."
        echo "📱 Architectures: armeabi-v7a, arm64-v8a, x86, x86_64"
        gradle assembleDebug --no-daemon --scan
        
        echo ""
        echo "📊 APK généré:"
        ls -lh app/build/outputs/apk/debug/*.apk

    - name: 🔍 Verify APK Architectures
      run: |
        cd android_keyboard
        APK_FILE=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
        
        echo "🔍 Vérification des architectures dans l'APK..."
        echo "📦 APK: $(basename $APK_FILE)"
        echo ""
        
        # Extraire et vérifier les librairies natives
        unzip -l "$APK_FILE" | grep "lib/" | grep ".so" | awk '{print $4}' | cut -d'/' -f1-2 | sort -u
        
        echo ""
        ARCH_COUNT=$(unzip -l "$APK_FILE" | grep "lib/" | cut -d'/' -f2 | sort -u | wc -l)
        echo "📊 Nombre d'architectures détectées: $ARCH_COUNT"
        
        if [ "$ARCH_COUNT" -ge 4 ]; then
          echo "✅ APK contient les 4 architectures (ARM + x86 pour ChromeOS)"
        else
          echo "⚠️ WARNING: APK contient seulement $ARCH_COUNT architectures"
        fi

    - name: 📤 Upload ChromeOS Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: chromeos-keyboard-debug-apk
        path: android_keyboard/app/build/outputs/apk/debug/*.apk
        retention-days: 7

  # 📦 ÉTAPE 2B : BUILD DEBUG AAB
  build-chromeos-debug-aab:
    name: 📦 Build ChromeOS Debug AAB
    runs-on: ubuntu-latest
    needs: verify-chromeos-config
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'aab-only'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🔧 Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: 📦 Build ChromeOS Debug AAB
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle bundleDebug --no-daemon --scan

    - name: 📤 Upload ChromeOS Debug AAB
      uses: actions/upload-artifact@v4
      with:
        name: chromeos-keyboard-debug-aab
        path: android_keyboard/app/build/outputs/bundle/debug/*.aab
        retention-days: 7

  # 🚀 ÉTAPE 3A : BUILD RELEASE APK
  build-chromeos-release-apk:
    name: 🚀 Build ChromeOS Release APK
    runs-on: ubuntu-latest
    needs: verify-chromeos-config
    
    env:
      KEYSTORE_FILE: potomitan-keystore.jks
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🔧 Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: 🔐 Setup Production Keystore
      run: |
        cd android_keyboard
        
        if [ -n "$STORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEY_PASSWORD" ]; then
          echo "🔑 Creating production keystore for ChromeOS release..."
          keytool -genkey -v -keystore app/$KEYSTORE_FILE -alias "$KEY_ALIAS" -keyalg RSA -keysize 2048 -validity 25000 \
            -storepass "$STORE_PASSWORD" -keypass "$KEY_PASSWORD" \
            -dname "CN=Potomitan Kreyol Keyboard,OU=Potomitan,O=Famibelle,L=Guadeloupe,ST=Guadeloupe,C=GP"
          echo "✅ Production keystore created"
        else
          echo "⚠️ Production secrets not available, using debug signing..."
        fi

    - name: 🧹 Clean Project
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle clean --no-daemon --scan

    - name: 🚀 Build ChromeOS Release APK
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: |
        cd android_keyboard
        echo "🏗️ Building Release APK avec support ChromeOS..."
        echo "📱 Architectures: armeabi-v7a, arm64-v8a, x86, x86_64"
        gradle assembleRelease --no-daemon --scan
        
        echo ""
        echo "📊 Release APK généré:"
        ls -lh app/build/outputs/apk/release/*.apk

    - name: 🔍 Verify Release APK Architectures
      run: |
        cd android_keyboard
        APK_FILE=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
        
        echo "🔍 Vérification architectures Release APK..."
        unzip -l "$APK_FILE" | grep "lib/" | grep ".so" | awk '{print $4}' | cut -d'/' -f1-2 | sort -u
        
        ARCH_COUNT=$(unzip -l "$APK_FILE" | grep "lib/" | cut -d'/' -f2 | sort -u | wc -l)
        echo "📊 Architectures: $ARCH_COUNT"
        
        if [ "$ARCH_COUNT" -ge 4 ]; then
          echo "✅ Release APK prêt pour ChromeOS et Android"
        fi

    - name: 📤 Upload ChromeOS Release APK
      uses: actions/upload-artifact@v4
      with:
        name: chromeos-keyboard-release-apk
        path: android_keyboard/app/build/outputs/apk/release/*.apk
        retention-days: 30

  # 🎯 ÉTAPE 3B : BUILD RELEASE AAB
  build-chromeos-release-aab:
    name: 🎯 Build ChromeOS Release AAB
    runs-on: ubuntu-latest
    needs: verify-chromeos-config
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'aab-only'
    
    env:
      KEYSTORE_FILE: potomitan-keystore.jks
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🔧 Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: 🔐 Setup Production Keystore
      run: |
        cd android_keyboard
        
        if [ -n "$STORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEY_PASSWORD" ]; then
          echo "🔑 Creating production keystore for ChromeOS AAB..."
          keytool -genkey -v -keystore app/$KEYSTORE_FILE -alias "$KEY_ALIAS" -keyalg RSA -keysize 2048 -validity 25000 \
            -storepass "$STORE_PASSWORD" -keypass "$KEY_PASSWORD" \
            -dname "CN=Potomitan Kreyol Keyboard,OU=Potomitan,O=Famibelle,L=Guadeloupe,ST=Guadeloupe,C=GP"
          echo "✅ Production keystore for AAB created"
        fi

    - name: 🎯 Build ChromeOS Release AAB
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: |
        cd android_keyboard
        echo "🏗️ Building Release AAB pour Play Store (Android + ChromeOS)..."
        gradle bundleRelease --no-daemon --scan
        
        echo ""
        echo "📊 Release AAB généré:"
        ls -lh app/build/outputs/bundle/release/*.aab

    - name: 📤 Upload ChromeOS Release AAB
      uses: actions/upload-artifact@v4
      with:
        name: chromeos-keyboard-release-aab
        path: android_keyboard/app/build/outputs/bundle/release/*.aab
        retention-days: 30

  # 📊 ÉTAPE 4 : VALIDATION & RAPPORT
  validate-chromeos-builds:
    name: 🔍 Validate ChromeOS Builds
    runs-on: ubuntu-latest
    needs: [build-chromeos-debug-apk, build-chromeos-release-apk]
    
    steps:
    - name: 📥 Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: chromeos-keyboard-debug-apk
        path: ./debug-apk

    - name: 📥 Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: chromeos-keyboard-release-apk
        path: ./release-apk

    - name: 📊 ChromeOS Build Summary
      run: |
        echo "🖥️ CHROMEOS BUILD VALIDATION"
        echo "============================"
        echo ""
        
        echo "🔧 DEBUG APK:"
        DEBUG_APK=$(find ./debug-apk -name "*.apk" | head -1)
        if [ -f "$DEBUG_APK" ]; then
          DEBUG_SIZE=$(stat -c%s "$DEBUG_APK" 2>/dev/null || stat -f%z "$DEBUG_APK" 2>/dev/null)
          DEBUG_SIZE_MB=$(echo "scale=2; $DEBUG_SIZE / 1048576" | bc)
          echo "  📱 Fichier: $(basename $DEBUG_APK)"
          echo "  📊 Taille: ${DEBUG_SIZE_MB} MB"
          
          echo "  🔍 Architectures:"
          unzip -l "$DEBUG_APK" | grep "lib/" | cut -d'/' -f2 | sort -u | while read arch; do
            echo "     ✅ $arch"
          done
        fi
        
        echo ""
        echo "🚀 RELEASE APK:"
        RELEASE_APK=$(find ./release-apk -name "*.apk" | head -1)
        if [ -f "$RELEASE_APK" ]; then
          RELEASE_SIZE=$(stat -c%s "$RELEASE_APK" 2>/dev/null || stat -f%z "$RELEASE_APK" 2>/dev/null)
          RELEASE_SIZE_MB=$(echo "scale=2; $RELEASE_SIZE / 1048576" | bc)
          echo "  📱 Fichier: $(basename $RELEASE_APK)"
          echo "  📊 Taille: ${RELEASE_SIZE_MB} MB"
          
          echo "  🔍 Architectures:"
          unzip -l "$RELEASE_APK" | grep "lib/" | cut -d'/' -f2 | sort -u | while read arch; do
            echo "     ✅ $arch"
          done
        fi
        
        echo ""
        echo "✅ CHROMEOS COMPATIBILITY VALIDATED!"
        echo "   - Android ARM devices ✅"
        echo "   - ChromeOS Intel/AMD (x86/x86_64) ✅"
        echo "   - ChromeOS ARM devices ✅"

    - name: ✅ Mark ChromeOS Builds Valid
      run: echo "✅ All ChromeOS builds completed successfully!"

  # 🎉 ÉTAPE 5 : CRÉATION RELEASE CHROMEOS (si tag)
  create-chromeos-release:
    name: 🎉 Create ChromeOS Release
    runs-on: ubuntu-latest
    needs: [validate-chromeos-builds]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Download All ChromeOS Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: chromeos-keyboard-*
        path: ./all-chromeos-artifacts

    - name: 📎 Prepare ChromeOS Release Assets
      run: |
        echo "📁 Préparation assets ChromeOS..."
        mkdir -p ./final-chromeos-assets
        
        # APK Release
        RELEASE_APK=$(find ./all-chromeos-artifacts/chromeos-keyboard-release-apk -name "*.apk" | head -1)
        if [ -n "$RELEASE_APK" ] && [ -f "$RELEASE_APK" ]; then
          cp "$RELEASE_APK" "./final-chromeos-assets/KreyolKeyboard-ChromeOS-Release-${{ github.ref_name }}.apk"
          echo "✅ APK Release ChromeOS"
        fi
        
        # APK Debug
        DEBUG_APK=$(find ./all-chromeos-artifacts/chromeos-keyboard-debug-apk -name "*.apk" | head -1)
        if [ -n "$DEBUG_APK" ] && [ -f "$DEBUG_APK" ]; then
          cp "$DEBUG_APK" "./final-chromeos-assets/KreyolKeyboard-ChromeOS-Debug-${{ github.ref_name }}.apk"
          echo "✅ APK Debug ChromeOS"
        fi
        
        # AAB Release (si disponible)
        RELEASE_AAB=$(find ./all-chromeos-artifacts/chromeos-keyboard-release-aab -name "*.aab" 2>/dev/null | head -1)
        if [ -n "$RELEASE_AAB" ] && [ -f "$RELEASE_AAB" ]; then
          cp "$RELEASE_AAB" "./final-chromeos-assets/KreyolKeyboard-ChromeOS-Release-${{ github.ref_name }}.aab"
          echo "✅ AAB Release ChromeOS"
        fi
        
        echo ""
        echo "📊 ASSETS CHROMEOS:"
        ls -lh ./final-chromeos-assets/

    - name: 🎉 Create GitHub ChromeOS Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: 🖥️ Klavyé Kreyòl ChromeOS ${{ github.ref_name }}
        body: |
          🖥️ **Clavier Kreyòl - ChromeOS Compatible Release ${{ github.ref_name }}**
          
          ## 🎯 COMPATIBILITÉ CHROMEOS
          
          Cette version est **100% compatible ChromeOS** avec support complet de :
          - ✅ **Chromebooks Intel/AMD** (x86, x86_64)
          - ✅ **Chromebooks ARM** (armeabi-v7a, arm64-v8a)
          - ✅ **Mode multi-fenêtres** ChromeOS
          - ✅ **Redimensionnement** de fenêtre
          - ✅ **Écrans larges** (ratio 2.4:1)
          - ✅ **Téléphones et tablettes Android** (zéro régression)
          
          ## 📱 FICHIERS DISPONIBLES
          
          - 🖥️ **APK Release ChromeOS** - Installation directe (Chromebook + Android)
          - 🔧 **APK Debug ChromeOS** - Version développement
          - 🏪 **AAB Release** - Bundle Google Play Store (si disponible)
          
          ## 🔧 ARCHITECTURES INCLUSES
          
          Chaque APK contient **4 architectures** :
          1. `armeabi-v7a` - ARM 32-bit (anciens appareils)
          2. `arm64-v8a` - ARM 64-bit (appareils récents)
          3. `x86` - Intel 32-bit (Chromebooks Intel anciens)
          4. `x86_64` - Intel 64-bit (Chromebooks modernes)
          
          ## 📊 TAILLE APK
          
          - **Debug** : ~5.5 MB (4 architectures)
          - **Release** : ~3 MB (optimisé et minifié)
          - **Via Play Store** : Distribution dynamique (taille optimale par appareil)
          
          ## 🚀 INSTALLATION CHROMEBOOK
          
          ### Via Play Store (Recommandé)
          1. Ouvrir le Play Store sur votre Chromebook
          2. Rechercher "Klavyé Kreyòl" ou "Potomitan Keyboard"
          3. Installer
          
          ### Via APK (Développeurs)
          ```bash
          adb install KreyolKeyboard-ChromeOS-Release-*.apk
          ```
          
          ### Activation
          1. **Paramètres** → **Langues et saisie**
          2. **Méthodes de saisie** → Activer "Klavyé Kreyòl"
          3. Utiliser **Ctrl + Espace** pour basculer
          
          ## 📚 DOCUMENTATION
          
          - 📘 [CHROMEOS_COMPATIBILITY.md](https://github.com/famibelle/KreyolKeyb/blob/feature/chromeos-support/android_keyboard/CHROMEOS_COMPATIBILITY.md)
          - 📗 [GUIDE_TEST_CHROMEOS.md](https://github.com/famibelle/KreyolKeyb/blob/feature/chromeos-support/android_keyboard/GUIDE_TEST_CHROMEOS.md)
          - 📙 [CHROMEOS_CHANGES.md](https://github.com/famibelle/KreyolKeyb/blob/feature/chromeos-support/android_keyboard/CHROMEOS_CHANGES.md)
          
          ## 🎉 NOUVEAUTÉS CHROMEOS
          
          - ✅ Support complet processeurs Intel/AMD
          - ✅ Optimisation pour écrans larges
          - ✅ Multi-fenêtres natif
          - ✅ Redimensionnement fluide
          - ✅ Performance identique à Android
          
          ---
          
          🇭🇹 **Kreyòl kounye a disponib sou Chromebook!** 🖥️
          
          **Mèsi anpil pou sipò w!**
        draft: false
        prerelease: false
        make_latest: true
        files: ./final-chromeos-assets/*
