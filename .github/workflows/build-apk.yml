name: üá∏üá∑ Build Potomitan Kreyol Keyboard - Detailed Steps

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main ]
    paths:
      - 'android_keyboard/**'
      - '.github/workflows/**'
      - 'Dictionnaries/**'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'android_keyboard/**'
      - 'Dictionnaries/**'
  workflow_dispatch:

jobs:
  # üìä √âTAPE 1 : G√âN√âRATION DICTIONNAIRE
  generate-dictionary:
    name: üî§ Generate Krey√≤l Dictionary
    runs-on: ubuntu-latest
    
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      
    outputs:
      dict-count: ${{ steps.stats.outputs.dict-count }}
      ngrams-count: ${{ steps.stats.outputs.ngrams-count }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Generate Fresh Krey√≤l Dictionary
      run: |
        echo "üîÑ Generating fresh Krey√≤l dictionary from Hugging Face..."
        echo "üîë Token configur√©: $(if [ -n "$HF_TOKEN" ]; then echo "‚úÖ Oui"; else echo "‚ùå Non"; fi)"
        
        cd Dictionnaires
        echo "üìÅ Contenu avant g√©n√©ration:"
        ls -la
        
        python -m pip install --upgrade pip
        pip install datasets huggingface_hub
        
        echo "üöÄ Lancement du script Python..."
        python KreyolComplet.py
        
        echo "üìÅ Contenu apr√®s g√©n√©ration:"
        ls -la
        
        echo "üîç V√©rification fichiers JSON g√©n√©r√©s dans clavier_creole/assets/:"
        ls -la ../clavier_creole/assets/creole_*.json || echo "‚ùå Aucun fichier JSON trouv√© dans clavier_creole/assets/"

    - name: üìä Verify Generated Assets
      run: |
        echo "ÔøΩ V√©rification des fichiers g√©n√©r√©s..."
        
        # Le script Python g√©n√®re directement dans clavier_creole/assets/
        if [ ! -f "clavier_creole/assets/creole_dict.json" ]; then
          echo "‚ùå ERREUR: creole_dict.json manquant dans clavier_creole/assets/!"
          echo "üìÅ Contenu du dossier clavier_creole/assets/:"
          ls -la clavier_creole/assets/ || echo "Dossier inexistant"
          echo "üìÅ Contenu du dossier Dictionnaires:"
          ls -la Dictionnaires/
          exit 1
        fi
        
        if [ ! -f "clavier_creole/assets/creole_ngrams.json" ]; then
          echo "‚ùå ERREUR: creole_ngrams.json manquant dans clavier_creole/assets/!"
          echo "üìÅ Contenu du dossier clavier_creole/assets/:"
          ls -la clavier_creole/assets/ || echo "Dossier inexistant"
          exit 1
        fi
        
        echo "‚úÖ Fichiers g√©n√©r√©s avec succ√®s dans clavier_creole/assets/!"
        echo "üìä Tailles des fichiers:"
        ls -lh clavier_creole/assets/creole_*.json

    - name: üìà Dictionary Statistics
      id: stats
      run: |
        # Statistiques directement depuis clavier_creole/assets/ o√π le script g√©n√®re
        DICT_COUNT=$(jq 'length' clavier_creole/assets/creole_dict.json)
        NGRAMS_COUNT=$(jq 'length' clavier_creole/assets/creole_ngrams.json)
        echo "üìä Dictionary: $DICT_COUNT words, $NGRAMS_COUNT N-grams"
        echo "dict-count=$DICT_COUNT" >> $GITHUB_OUTPUT
        echo "ngrams-count=$NGRAMS_COUNT" >> $GITHUB_OUTPUT

    - name: üéØ Copy Dictionary to Android Assets Directory
      run: |
        echo "üìÅ Pr√©paration des assets Android..."
        mkdir -p android_keyboard/app/src/main/assets/
        
        # Copier directement vers le r√©pertoire Android
        cp clavier_creole/assets/creole_dict.json android_keyboard/app/src/main/assets/
        cp clavier_creole/assets/creole_ngrams.json android_keyboard/app/src/main/assets/
        
        echo "‚úÖ Dictionnaires copi√©s vers android_keyboard/app/src/main/assets/"
        echo "üìä V√©rification:"
        ls -la android_keyboard/app/src/main/assets/creole_*.json

    - name: üéØ Dictionary Assets Ready
      run: |
        echo "‚úÖ Assets de dictionnaire pr√™ts pour les builds Android"
        echo "ÔøΩ Statistiques finales:"
        DICT_COUNT=$(jq 'length' android_keyboard/app/src/main/assets/creole_dict.json)
        NGRAMS_COUNT=$(jq 'length' android_keyboard/app/src/main/assets/creole_ngrams.json)
        echo "   - Mots: $DICT_COUNT"
        echo "   - N-grams: $NGRAMS_COUNT"
        echo "ÔøΩ Fichiers disponibles pour tous les jobs de build"

  # üîß √âTAPE 2A : BUILD DEBUG APK
  build-debug-apk:
    name: üîß Build Debug APK
    runs-on: ubuntu-latest
    needs: generate-dictionary
    
    env:
      KEYSTORE_FILE: potomitan-keystore.jks
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ‚òï Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üîß Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: ‚úÖ Verify Dictionary Assets Present
      run: |
        echo "üîç V√©rification des assets de dictionnaire..."
        if [ -f "android_keyboard/app/src/main/assets/creole_dict.json" ]; then
          echo "‚úÖ creole_dict.json pr√©sent"
        else
          echo "‚ùå creole_dict.json manquant"
          exit 1
        fi
        
        if [ -f "android_keyboard/app/src/main/assets/creole_ngrams.json" ]; then
          echo "‚úÖ creole_ngrams.json pr√©sent"
        else
          echo "‚ùå creole_ngrams.json manquant"
          exit 1
        fi
        
        echo "üìä Tailles des fichiers:"
        ls -lh android_keyboard/app/src/main/assets/creole_*.json

    - name: üßπ Clean Project
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle clean --no-daemon --scan

    - name: üî® Build Debug APK
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle assembleDebug --no-daemon --scan

    - name: üì§ Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: kreyol-keyboard-debug-apk
        path: android_keyboard/app/build/outputs/apk/debug/*.apk
        retention-days: 7

  # üì¶ √âTAPE 2B : BUILD DEBUG AAB  
  build-debug-aab:
    name: üì¶ Build Debug AAB
    runs-on: ubuntu-latest
    needs: generate-dictionary
    
    env:
      KEYSTORE_FILE: potomitan-keystore.jks
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ‚òï Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üîß Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: ‚úÖ Verify Dictionary Assets Present
      run: |
        echo "üîç V√©rification des assets de dictionnaire..."
        ls -lh android_keyboard/app/src/main/assets/creole_*.json || echo "‚ùå Fichiers dictionnaire manquants"

    - name: üì¶ Build Debug AAB
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle bundleDebug --no-daemon --scan

    - name: üì§ Upload Debug AAB
      uses: actions/upload-artifact@v4
      with:
        name: kreyol-keyboard-debug-aab
        path: android_keyboard/app/build/outputs/bundle/debug/*.aab
        retention-days: 7

  # üöÄ √âTAPE 3A : BUILD RELEASE APK
  build-release-apk:
    name: üöÄ Build Release APK
    runs-on: ubuntu-latest
    needs: generate-dictionary
    
    env:
      KEYSTORE_FILE: potomitan-keystore.jks
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ‚òï Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üîß Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: ‚úÖ Verify Dictionary Assets Present
      run: |
        echo "üîç V√©rification des assets de dictionnaire..."
        ls -lh android_keyboard/app/src/main/assets/creole_*.json || echo "‚ùå Fichiers dictionnaire manquants"

    - name: üîê Setup Production Keystore for Release APK
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        cd android_keyboard
        
        if [ -n "$STORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEY_PASSWORD" ] && [ -n "$KEYSTORE_BASE64" ]; then
          echo "üîë Decoding production keystore from GitHub Secrets..."
          echo "$KEYSTORE_BASE64" | base64 -d > app/$KEYSTORE_FILE
          echo "‚úÖ Production keystore decoded: $KEYSTORE_FILE"
          echo "üîê Release APK will be signed with production key"
          
          # V√©rification du keystore
          keytool -list -v -keystore app/$KEYSTORE_FILE -alias "$KEY_ALIAS" -storepass "$STORE_PASSWORD" | grep "SHA1:" || echo "‚ö†Ô∏è SHA1 verification"
        else
          echo "‚ö†Ô∏è Production secrets not available, generating debug keystore..."
          keytool -genkey -v -keystore app/debug.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
        fi

    - name: üßπ Clean Project  
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle clean --no-daemon --scan

    - name: üöÄ Build Release APK
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle assembleRelease --no-daemon --scan

    - name: üì§ Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: kreyol-keyboard-release-apk
        path: android_keyboard/app/build/outputs/apk/release/*.apk
        retention-days: 30

  # üéØ √âTAPE 3B : BUILD RELEASE AAB
  build-release-aab:
    name: üéØ Build Release AAB  
    runs-on: ubuntu-latest
    needs: generate-dictionary
    
    env:
      KEYSTORE_FILE: potomitan-keystore.jks
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: ‚òï Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üîß Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.7
        cache-read-only: false

    - name: ‚úÖ Verify Dictionary Assets Present
      run: |
        echo "üîç V√©rification des assets de dictionnaire..."
        ls -lh android_keyboard/app/src/main/assets/creole_*.json || echo "‚ùå Fichiers dictionnaire manquants"

    - name: üîê Setup Production Keystore for Release AAB
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        cd android_keyboard
        
        if [ -n "$STORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEY_PASSWORD" ] && [ -n "$KEYSTORE_BASE64" ]; then
          echo "üîë Decoding production keystore from GitHub Secrets..."
          echo "$KEYSTORE_BASE64" | base64 -d > app/$KEYSTORE_FILE
          echo "‚úÖ Production keystore decoded: $KEYSTORE_FILE"
          echo "üè™ Release AAB will be signed for Google Play Store"
          
          # V√©rification du keystore
          keytool -list -v -keystore app/$KEYSTORE_FILE -alias "$KEY_ALIAS" -storepass "$STORE_PASSWORD" | grep "SHA1:" || echo "‚ö†Ô∏è SHA1 verification"
        else
          echo "‚ö†Ô∏è Production secrets not available, generating debug keystore..."
          keytool -genkey -v -keystore app/debug.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
        fi

    - name: üéØ Build Release AAB
      env:
        GRADLE_OPTS: "-Dorg.gradle.buildscan.termsOfServiceUrl=https://gradle.com/terms-of-service -Dorg.gradle.buildscan.termsOfServiceAgree=yes"
      run: cd android_keyboard && gradle bundleRelease --no-daemon --scan

    - name: üì§ Upload Release AAB
      uses: actions/upload-artifact@v4
      with:
        name: kreyol-keyboard-release-aab  
        path: android_keyboard/app/build/outputs/bundle/release/*.aab
        retention-days: 30

  # üì± √âTAPE 4 : VALIDATION & TESTS
  validate-builds:
    name: üîç Validate Builds
    runs-on: ubuntu-latest
    needs: [build-debug-apk, build-debug-aab, build-release-apk, build-release-aab]
    
    steps:
    - name: üì• Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./all-builds

    - name: üìä Build Summary
      run: |
        echo "üéØ BUILD VALIDATION SUMMARY"
        echo "=========================="
        
        find ./all-builds -name "*.apk" -o -name "*.aab" | while read file; do
          echo "üì± $(basename "$file"): $(stat -f%z "$file" 2>/dev/null || stat -c%s "$file") bytes"
        done

    - name: ‚úÖ Mark Builds Valid
      run: echo "‚úÖ All builds completed successfully!"

  # üéâ √âTAPE 5 : CR√âATION RELEASE (si tag)
  create-release:
    name: üéâ Create Release
    runs-on: ubuntu-latest
    needs: [generate-dictionary, validate-builds]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: üì• Download All Build Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: kreyol-keyboard-*
        path: ./all-artifacts

    - name: üìé Prepare All Release Assets with Custom Names
      run: |
        echo "üìÅ Pr√©paration de tous les assets pour release..."
        mkdir -p ./final-release-assets
        
        echo "üîç Contenu complet des artifacts t√©l√©charg√©s:"
        find ./all-artifacts -type f -name "*.apk" -o -name "*.aab"
        
        echo "üìÅ Structure des dossiers artifacts:"
        ls -la ./all-artifacts/
        
        # üì± APK RELEASE - Detection automatique
        RELEASE_APK=$(find ./all-artifacts/kreyol-keyboard-release-apk -name "*.apk" | head -1)
        if [ -n "$RELEASE_APK" ] && [ -f "$RELEASE_APK" ]; then
          cp "$RELEASE_APK" "./final-release-assets/KreyolKeyboard-Release-${{ github.ref_name }}.apk"
          echo "‚úÖ APK Release: KreyolKeyboard-Release-${{ github.ref_name }}.apk (source: $(basename $RELEASE_APK))"
        else
          echo "‚ùå APK release non trouv√©"
          echo "üìÅ Contenu dossier release APK:"
          ls -la ./all-artifacts/kreyol-keyboard-release-apk/ || echo "Dossier APK release inexistant"
          echo "üîç Recherche de fichiers APK:"
          find ./all-artifacts/kreyol-keyboard-release-apk -name "*.apk" || echo "Aucun fichier APK trouv√©"
        fi
        
        # üîß APK DEBUG - Detection automatique  
        DEBUG_APK=$(find ./all-artifacts/kreyol-keyboard-debug-apk -name "*.apk" | head -1)
        if [ -n "$DEBUG_APK" ] && [ -f "$DEBUG_APK" ]; then
          cp "$DEBUG_APK" "./final-release-assets/KreyolKeyboard-Debug-${{ github.ref_name }}.apk"
          echo "‚úÖ APK Debug: KreyolKeyboard-Debug-${{ github.ref_name }}.apk (source: $(basename $DEBUG_APK))"
        else
          echo "‚ùå APK debug non trouv√©"
          echo "üìÅ Contenu dossier debug APK:"
          ls -la ./all-artifacts/kreyol-keyboard-debug-apk/ || echo "Dossier APK debug inexistant"
          echo "üîç Recherche de fichiers APK:"
          find ./all-artifacts/kreyol-keyboard-debug-apk -name "*.apk" || echo "Aucun fichier APK trouv√©"
        fi
        
        # üì¶ AAB RELEASE - Detection automatique
        RELEASE_AAB=$(find ./all-artifacts/kreyol-keyboard-release-aab -name "*.aab" | head -1)
        if [ -n "$RELEASE_AAB" ] && [ -f "$RELEASE_AAB" ]; then
          cp "$RELEASE_AAB" "./final-release-assets/KreyolKeyboard-Release-${{ github.ref_name }}.aab"
          echo "‚úÖ AAB Release: KreyolKeyboard-Release-${{ github.ref_name }}.aab (source: $(basename $RELEASE_AAB))"
        else
          echo "‚ùå AAB release non trouv√©"
          echo "üìÅ Contenu dossier release AAB:"
          ls -la ./all-artifacts/kreyol-keyboard-release-aab/ || echo "Dossier AAB release inexistant"
          echo "üîç Recherche de fichiers AAB:"
          find ./all-artifacts/kreyol-keyboard-release-aab -name "*.aab" || echo "Aucun fichier AAB trouv√©"
        fi
        
        # üîß AAB DEBUG - Detection automatique
        DEBUG_AAB=$(find ./all-artifacts/kreyol-keyboard-debug-aab -name "*.aab" | head -1)
        if [ -n "$DEBUG_AAB" ] && [ -f "$DEBUG_AAB" ]; then
          cp "$DEBUG_AAB" "./final-release-assets/KreyolKeyboard-Debug-${{ github.ref_name }}.aab"
          echo "‚úÖ AAB Debug: KreyolKeyboard-Debug-${{ github.ref_name }}.aab (source: $(basename $DEBUG_AAB))"
        else
          echo "‚ùå AAB debug non trouv√©"
          echo "üìÅ Contenu dossier debug AAB:"
          ls -la ./all-artifacts/kreyol-keyboard-debug-aab/ || echo "Dossier AAB debug inexistant"
          echo "üîç Recherche de fichiers AAB:"
          find ./all-artifacts/kreyol-keyboard-debug-aab -name "*.aab" || echo "Aucun fichier AAB trouv√©"
        fi
        
        echo ""
        echo "üìä ASSETS FINAUX PR√âPAR√âS:"
        ls -la ./final-release-assets/
        echo ""
        echo "üìù R√âSUM√â:"
        find ./final-release-assets -name "*.apk" -o -name "*.aab" | while read file; do
          size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
          echo "  üì± $(basename "$file"): ${size} bytes"
        done

    - name: üéâ Create GitHub Release with Assets
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: üá∏üá∑ Krey√≤l Keyboard ${{ github.ref_name }}
        body: |
          üéØ **Clavier Krey√≤l Potomitan Release ${{ github.ref_name }}**
          
          üîß **AM√âLIORATIONS TECHNIQUES**
          - ‚úÖ Build Scan¬Æ integration avec monitoring avanc√©
          - ‚úÖ Pipeline subdivisionn√© en 6 jobs parall√®les  
          - ‚úÖ Fix memory leaks Samsung A21s (serviceScope)
          - ‚úÖ Optimisations pour processeurs Exynos 850
          - ‚úÖ Detection low-end devices automatique
          
          üì± **FICHIERS ANDROID DISPONIBLES**
          - ÔøΩ **APK Release** - Installation directe (recommand√© pour utilisateurs)
          - ÔøΩ **APK Debug** - Version de d√©veloppement avec logs
          - üè™ **AAB Release** - Bundle Google Play Store (distribution officielle)  
          - üõ†Ô∏è **AAB Debug** - Bundle de d√©veloppement
          - üìä Build Scan Reports pour analyse d√©taill√©e
          
          üî§ **DICTIONNAIRE KREY√íL ENRICHI** 
          - ‚úÖ ${{ needs.generate-dictionary.outputs.dict-count }} mots cr√©oles
          - üß† ${{ needs.generate-dictionary.outputs.ngrams-count }} N-grams pr√©dictifs
          - üì° Synchronisation automatique Hugging Face
          - üîÑ Pipeline de g√©n√©ration optimis√©
          
          üá∏üá∑ **Krey√≤l Gwadloup ka viv!** üá∏üá∑
          
          ---
          üîó **Build Details**: Consulter les Build Scan Reports pour analyse compl√®te des performances
        draft: false
        prerelease: false
        make_latest: true
        files: ./final-release-assets/*