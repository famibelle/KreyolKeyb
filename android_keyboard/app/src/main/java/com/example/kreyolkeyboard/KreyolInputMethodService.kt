package com.example.kreyolkeyboard

import android.inputmethodservice.InputMethodService
import android.view.View
import android.widget.TextView
import android.graphics.Color
import android.view.Gravity
import android.util.Log
import android.widget.LinearLayout
import android.widget.Button
import android.view.ViewGroup
import android.view.inputmethod.EditorInfo
import android.widget.HorizontalScrollView
import org.json.JSONArray
import java.io.IOException
import android.view.MotionEvent
import android.os.Handler
import android.os.Looper
import android.widget.PopupWindow
import android.view.LayoutInflater

class KreyolInputMethodService : InputMethodService() {
    
    private val TAG = "KreyolIME"
    
    // üá¨üáµ PALETTE COULEURS GUADELOUPE üá¨üáµ
    companion object {
        // Couleurs principales - Palette "Pur Guadeloupe"
        const val BLEU_CARAIBE = "#0080FF"        // Bleu des eaux carib√©ennes
        const val JAUNE_SOLEIL = "#FFD700"        // Jaune du soleil tropical
        const val VERT_CANNE = "#228B22"          // Vert de la canne √† sucre
        const val NOIR_VOLCANIQUE = "#1C1C1C"    // Noir des racines volcaniques
        const val BLANC_CORAL = "#F8F8FF"        // Blanc du corail
        
        // Couleurs secondaires pour nuances
        const val BLEU_LAGON = "#87CEEB"          // Bleu plus clair du lagon
        const val ORANGE_COUCHER = "#FF8C00"     // Orange du coucher de soleil
        const val ROUGE_HIBISCUS = "#DC143C"     // Rouge de l'hibiscus
        const val BEIGE_SABLE = "#F5F5DC"        // Beige du sable fin
    }
    
    private var dictionary: List<Pair<String, Int>> = emptyList()
    private var currentWord = ""
    private var suggestionsView: LinearLayout? = null
    private var suggestionsViewId: Int = View.NO_ID
    
    // Variables pour l'appui long
    private val longPressHandler = Handler(Looper.getMainLooper())
    private var longPressRunnable: Runnable? = null
    private var isLongPressTriggered = false
    
    // Gestion des majuscules/minuscules
    private var isCapitalMode = false
    private var isCapsLock = false
    private var keyboardButtons = mutableListOf<Button>()
    private var isUpdatingKeyboard = false
    private var isNumericMode = false
    private var mainKeyboardLayout: LinearLayout? = null
    
    // Mapping des accents pour appui long
    private val accentMap = mapOf(
        "A" to arrayOf("√†", "√°", "√¢", "√§", "√£", "√•", "√¶"),
        "E" to arrayOf("√©", "√®", "√™", "√´"),
        "I" to arrayOf("√≠", "√¨", "√Æ", "√Ø"),
        "O" to arrayOf("√≥", "√≤", "√¥", "√∂", "√µ", "√∏"),
        "U" to arrayOf("√∫", "√π", "√ª", "√º"),
        "C" to arrayOf("√ß", "ƒá", "ƒç"),
        "N" to arrayOf("√±"),
        "Y" to arrayOf("√Ω", "√ø")
    )
    
    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "=== KREYOL IME SERVICE onCreate() APPEL√â ! ===")
        
        try {
            Log.d(TAG, "Initialisation du dictionnaire...")
            dictionary = emptyList()
            currentWord = "" // Reset du mot actuel
            loadDictionary() // Activer le chargement du dictionnaire
            Log.d(TAG, "Variables initialis√©es et dictionnaire charg√©")
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de l'initialisation", e)
        }
    }
    
    private fun updateSuggestions(input: String) {
        Log.d(TAG, "=== updateSuggestions appel√©e avec input: '$input' ===")
        Log.d(TAG, "suggestionsView est null: ${suggestionsView == null}")
        Log.d(TAG, "isNumericMode: $isNumericMode")
        
        // V√©rifier la validit√© de suggestionsView
        if (suggestionsView == null) {
            Log.e(TAG, "suggestionsView est null ! Tentative de r√©cup√©ration...")
            // Essayer de r√©cup√©rer la vue depuis le layout principal
            val currentView = mainKeyboardLayout
            if (currentView != null && currentView.childCount > 1) {
                val suggestionsContainer = currentView.getChildAt(1) as? HorizontalScrollView
                suggestionsView = suggestionsContainer?.getChildAt(0) as? LinearLayout
                if (suggestionsView != null) {
                    suggestionsViewId = suggestionsView!!.id
                    Log.d(TAG, "suggestionsView r√©cup√©r√©e avec succ√®s !")
                }
            }
            
            if (suggestionsView == null) {
                Log.e(TAG, "Impossible de r√©cup√©rer suggestionsView, abandon de la mise √† jour")
                return
            }
        }
        
        // En mode num√©rique, vider les suggestions
        if (isNumericMode) {
            suggestionsView?.removeAllViews()
            Log.d(TAG, "Mode num√©rique - suggestions vid√©es")
            return
        }
        
        suggestionsView?.removeAllViews()
        
        try {
            val suggestions = if (input.isEmpty()) {
                // Montrer les mots les plus fr√©quents quand pas d'input
                dictionary.take(8).map { it.first }
            } else {
                // Filtrer le dictionnaire par l'input actuel
                dictionary.filter { it.first.startsWith(input.lowercase(), ignoreCase = true) }
                    .take(8)
                    .map { it.first }
            }
            
            Log.d(TAG, "Suggestions trouv√©es pour '$input': ${suggestions.joinToString(", ")}")
            Log.d(TAG, "Nombre de suggestions: ${suggestions.size}")
            
            suggestions.forEach { suggestion ->
                val button = Button(this).apply {
                    text = suggestion
                    textSize = 14f
                    // üá¨üáµ Style Guadeloupe pour les suggestions
                    setBackgroundColor(Color.parseColor(ORANGE_COUCHER))
                    setTextColor(Color.parseColor(BLANC_CORAL))
                    setTypeface(null, android.graphics.Typeface.BOLD)
                    setPadding(20, 12, 20, 12)
                    elevation = 2f
                    
                    layoutParams = LinearLayout.LayoutParams(
                        ViewGroup.LayoutParams.WRAP_CONTENT,
                        ViewGroup.LayoutParams.MATCH_PARENT
                    ).apply {
                        marginEnd = 8
                    }
                    
                    setOnClickListener {
                        Log.d(TAG, "Suggestion s√©lectionn√©e: $suggestion")
                        // Remplacer le mot actuel par la suggestion
                        val inputConnection = currentInputConnection
                        if (inputConnection != null && currentWord.isNotEmpty()) {
                            // Supprimer le mot partiel
                            inputConnection.deleteSurroundingText(currentWord.length, 0)
                        }
                        // Ins√©rer la suggestion compl√®te
                        inputConnection?.commitText("$suggestion ", 1)
                        currentWord = ""
                        updateSuggestions("")
                    }
                }
                
                suggestionsView?.addView(button)
                Log.d(TAG, "Bouton de suggestion ajout√©: $suggestion")
            }
            
            Log.d(TAG, "=== updateSuggestions termin√©e avec succ√®s ===")
            
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la mise √† jour des suggestions", e)
        }
    }

    private fun loadDictionary() {
        try {
            Log.d(TAG, "Chargement du dictionnaire cr√©ole...")
            val inputStream = assets.open("creole_dict.json")
            val jsonString = inputStream.bufferedReader().use { it.readText() }
            
            val jsonArray = JSONArray(jsonString)
            val tempList = mutableListOf<Pair<String, Int>>()
            
            for (i in 0 until jsonArray.length()) {
                val entry = jsonArray.getJSONArray(i)
                val word = entry.getString(0)
                val frequency = entry.getInt(1)
                tempList.add(Pair(word, frequency))
            }
            
            dictionary = tempList.sortedByDescending { it.second } // Trier par fr√©quence
            Log.d(TAG, "Dictionnaire charg√©: ${dictionary.size} mots")
            
        } catch (e: IOException) {
            Log.e(TAG, "Erreur lors du chargement du dictionnaire", e)
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors du parsing du dictionnaire", e)
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "Service onDestroy() appel√© !")
    }
    
    override fun onStartInput(info: android.view.inputmethod.EditorInfo?, restarting: Boolean) {
        super.onStartInput(info, restarting)
        Log.d(TAG, "=== KREYOL onStartInput appel√© - restarting: $restarting ===")
        Log.d(TAG, "EditorInfo: $info")
    }
    
    override fun onStartInputView(info: android.view.inputmethod.EditorInfo?, restarting: Boolean) {
        super.onStartInputView(info, restarting)
        Log.d(TAG, "=== KREYOL onStartInputView appel√© - restarting: $restarting ===")
        
        // V√©rifier et initialiser suggestionsView si n√©cessaire
        if (suggestionsView == null) {
            Log.d(TAG, "suggestionsView est null, tentative de r√©cup√©ration depuis la vue existante")
            val currentView = mainKeyboardLayout
            if (currentView != null && suggestionsViewId != View.NO_ID) {
                suggestionsView = currentView.findViewById<LinearLayout>(suggestionsViewId)
                Log.d(TAG, "suggestionsView r√©cup√©r√©e par ID: ${suggestionsView != null}")
            }
        }
        
        // Initialiser avec les suggestions de base
        if (suggestionsView != null) {
            Log.d(TAG, "Initialisation des suggestions de base")
            updateSuggestions("")
        } else {
            Log.e(TAG, "Impossible de r√©cup√©rer suggestionsView !")
        }
        
        // V√©rifier si on a une vue
        Log.d(TAG, "Vue d'entr√©e disponible, clavier devrait √™tre visible")
    }
    
    override fun onUpdateSelection(oldSelStart: Int, oldSelEnd: Int, newSelStart: Int, newSelEnd: Int, candidatesStart: Int, candidatesEnd: Int) {
        super.onUpdateSelection(oldSelStart, oldSelEnd, newSelStart, newSelEnd, candidatesStart, candidatesEnd)
        
        Log.d(TAG, "onUpdateSelection - oldSel: $oldSelStart-$oldSelEnd, newSel: $newSelStart-$newSelEnd")
        
        // Si la s√©lection a chang√© ou le texte a √©t√© modifi√© depuis l'ext√©rieur
        if (newSelStart != newSelEnd || oldSelStart != newSelStart) {
            // Essayer de r√©cup√©rer le mot actuel depuis le curseur
            val inputConnection = currentInputConnection
            if (inputConnection != null && !isNumericMode) {
                try {
                    // R√©cup√©rer le texte avant le curseur pour d√©tecter le mot en cours
                    val textBeforeCursor = inputConnection.getTextBeforeCursor(50, 0)?.toString() ?: ""
                    val words = textBeforeCursor.split(Regex("\\s+"))
                    val lastWord = if (words.isNotEmpty()) words.last() else ""
                    
                    // Mettre √† jour currentWord seulement si diff√©rent et pas d'espace √† la fin
                    if (lastWord != currentWord && !textBeforeCursor.endsWith(" ")) {
                        currentWord = lastWord
                        Log.d(TAG, "Synchronisation currentWord: '$currentWord'")
                        updateSuggestions(currentWord)
                    } else if (textBeforeCursor.endsWith(" ")) {
                        // Si l'utilisateur a ajout√© un espace, vider currentWord
                        currentWord = ""
                        Log.d(TAG, "Espace d√©tect√©, currentWord vid√©")
                        updateSuggestions("")
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Erreur lors de la synchronisation du mot actuel", e)
                }
            }
        }
    }
    
    override fun onFinishInput() {
        super.onFinishInput()
        Log.d(TAG, "onFinishInput appel√©")
    }
    
    override fun onEvaluateFullscreenMode(): Boolean {
        Log.d(TAG, "onEvaluateFullscreenMode appel√©")
        return false // D√©sactiv√© le mode plein √©cran
    }
    
    override fun onEvaluateInputViewShown(): Boolean {
        Log.d(TAG, "onEvaluateInputViewShown appel√©")
        return true // Force l'affichage du clavier
    }

    override fun onCreateInputView(): View? {
        Log.d(TAG, "=== KREYOL onCreateInputView appel√© ! ===")
        
        try {
            Log.d(TAG, "Cr√©ation du clavier AZERTY avec support majuscules/minuscules...")
            
            // R√©initialiser la liste des boutons
            keyboardButtons.clear()
            
            // Cr√©er le layout principal avec fond volcanique
            val mainLayout = LinearLayout(this).apply {
                orientation = LinearLayout.VERTICAL
                setBackgroundColor(Color.parseColor(NOIR_VOLCANIQUE))
                setPadding(8, 8, 8, 8)
            }
            
            // Stocker la r√©f√©rence pour les changements de mode
            mainKeyboardLayout = mainLayout
            
            // Titre du clavier - Style Guadeloupe
            val titleView = TextView(this).apply {
                text = "Klavi√© Krey√≤l Karukera üá¨üáµ"
                textSize = 16f
                setBackgroundColor(Color.parseColor(BLEU_CARAIBE))
                setTextColor(Color.parseColor(BLANC_CORAL))
                setPadding(16, 12, 16, 12)
                gravity = Gravity.CENTER
                setTypeface(null, android.graphics.Typeface.BOLD)
            }
            mainLayout.addView(titleView)
            
            // Barre de suggestions - Style tropical
            val suggestionsContainer = HorizontalScrollView(this).apply {
                layoutParams = LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
                setBackgroundColor(Color.parseColor(BEIGE_SABLE))
                setPadding(8, 8, 8, 8)
            }
            
            suggestionsView = LinearLayout(this).apply {
                orientation = LinearLayout.HORIZONTAL
                layoutParams = LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
                id = View.generateViewId() // Donner un ID unique
            }
            
            // Stocker l'ID pour r√©cup√©ration ult√©rieure
            suggestionsViewId = suggestionsView!!.id
            
            suggestionsContainer.addView(suggestionsView)
            mainLayout.addView(suggestionsContainer)
            
            // Initialiser avec les mots les plus fr√©quents
            updateSuggestions("")
            
            // Cr√©er le clavier selon le mode
            createKeyboardLayout(mainLayout)
            
            // Mettre √† jour l'affichage initial du clavier
            updateKeyboardDisplay()
            
            Log.d(TAG, "=== CLAVIER KREY√íL CR√â√â AVEC SUCC√àS ! suggestionsView: ${suggestionsView != null} ===")
            return mainLayout
            
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la cr√©ation de la vue du clavier", e)
            return null
        }
    }
    
    // üá¨üáµ FONCTION DE STYLE GUADELOUPE
    private fun applyGuadeloupeStyle(button: Button, key: String) {
        when {
            // Touches de lettres - Blanc corail sur fond bleu cara√Øbe
            key.length == 1 && key.matches(Regex("[a-zA-Z]")) -> {
                button.setBackgroundColor(Color.parseColor(BLANC_CORAL))
                button.setTextColor(Color.parseColor(BLEU_CARAIBE))
                button.setTypeface(null, android.graphics.Typeface.BOLD)
                button.textSize = 16f
            }
            
            // Touches sp√©ciales importantes - Jaune soleil
            key in arrayOf("‚å´", "‚èé", "‚Üë", "ABC", "123") -> {
                button.setBackgroundColor(Color.parseColor(JAUNE_SOLEIL))
                button.setTextColor(Color.parseColor(NOIR_VOLCANIQUE))
                button.setTypeface(null, android.graphics.Typeface.BOLD)
                button.textSize = 15f
            }
            
            // Barre d'espace - Vert canne √† sucre avec texte sp√©cial
            key == "ESPACE" -> {
                button.setBackgroundColor(Color.parseColor(VERT_CANNE))
                button.setTextColor(Color.parseColor(BLANC_CORAL))
                button.setTypeface(null, android.graphics.Typeface.BOLD)
                button.text = "üá¨üáµ ESPACE ‚Ä¢ Potomitan‚Ñ¢"
                button.textSize = 12f
            }
            
            // Touches num√©riques - Bleu lagon
            key.matches(Regex("[0-9]")) -> {
                button.setBackgroundColor(Color.parseColor(BLEU_LAGON))
                button.setTextColor(Color.parseColor(NOIR_VOLCANIQUE))
                button.setTypeface(null, android.graphics.Typeface.BOLD)
                button.textSize = 16f
            }
            
            // Autres touches de ponctuation - Beige sable
            else -> {
                button.setBackgroundColor(Color.parseColor(BEIGE_SABLE))
                button.setTextColor(Color.parseColor(NOIR_VOLCANIQUE))
                button.setTypeface(null, android.graphics.Typeface.NORMAL)
                button.textSize = 15f
            }
        }
        
        // Bordure subtile et padding √©l√©gant pour toutes les touches
        button.setPadding(12, 16, 12, 16)
        button.elevation = 4f // L√©g√®re ombre pour l'effet 3D
    }
    
    private fun createKeyboardRow(keys: Array<String>): LinearLayout {
        val row = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
            )
            setPadding(4, 4, 4, 4)
        }
        
        for (key in keys) {
            val button = Button(this).apply {
                text = key
                tag = key // Stocker la valeur originale dans le tag
                textSize = 14f
                
                // üá¨üáµ DESIGN GUADELOUPE : Appliquer les couleurs selon le type de touche
                applyGuadeloupeStyle(this, key)
                
                // G√©rer la taille des boutons
                val params = LinearLayout.LayoutParams(
                    if (key == "ESPACE") 0 else ViewGroup.LayoutParams.WRAP_CONTENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
                if (key == "ESPACE") {
                    params.weight = 3f // L'espace prend plus de place
                } else {
                    params.weight = 1f
                }
                params.setMargins(3, 3, 3, 3) // L√©g√®rement plus d'espace
                layoutParams = params
                
                // Gestion des √©v√©nements tactiles pour l'appui long
                setOnTouchListener { _, event ->
                    when (event.action) {
                        MotionEvent.ACTION_DOWN -> {
                            isLongPressTriggered = false
                            // V√©rifier si cette touche a des accents (uniquement pour les lettres)
                            if (key.length == 1 && key.matches(Regex("[a-zA-Z]")) && accentMap.containsKey(key.uppercase())) {
                                startLongPressTimer(key, this)
                            }
                            true
                        }
                        MotionEvent.ACTION_UP -> {
                            cancelLongPress()
                            if (!isLongPressTriggered) {
                                // Appui court normal
                                handleKeyPress(key)
                            }
                            true
                        }
                        MotionEvent.ACTION_CANCEL -> {
                            cancelLongPress()
                            true
                        }
                        else -> false
                    }
                }
            }
            
            // Ajouter le bouton √† la liste pour la gestion des majuscules
            keyboardButtons.add(button)
            row.addView(button)
        }
        
        return row
    }
    
    private fun updateKeyboardDisplay() {
        if (isUpdatingKeyboard) {
            Log.d(TAG, "Mise √† jour du clavier d√©j√† en cours, ignor√©e")
            return
        }
        
        isUpdatingKeyboard = true
        
        try {
            keyboardButtons.forEach { button ->
                val originalText = button.tag as? String ?: button.text.toString().lowercase()
                val displayText = if (isCapitalMode || isCapsLock) {
                    originalText.uppercase()
                } else {
                    originalText.lowercase()
                }
                
                // Mettre √† jour l'affichage du bouton seulement si n√©cessaire
                val newText = when (originalText) {
                    "‚áß" -> "‚áß" // Toujours le m√™me symbole
                    "‚å´", "‚èé", "ESPACE", "123", "ABC" -> originalText
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" -> originalText // Chiffres
                    "@", "#", "$", "%", "&", "-", "+", "(", ")", "/", "*", "\"", "'", ":", ";", "!", "?", ",", "." -> originalText // Symboles
                    else -> if (isNumericMode) originalText else displayText // En mode num√©rique, pas de changement de casse
                }
                
                // Mettre √† jour seulement si le texte a chang√©
                if (button.text.toString() != newText) {
                    button.text = newText
                }
                
                // Colorer la touche Shift selon son √©tat
                if (originalText == "‚áß") {
                    val newColor = when {
                        isCapsLock -> Color.BLUE
                        isCapitalMode -> Color.CYAN
                        else -> Color.LTGRAY
                    }
                    
                    // Mettre √† jour seulement si la couleur a chang√©
                    if (button.background !is android.graphics.drawable.ColorDrawable || 
                        (button.background as? android.graphics.drawable.ColorDrawable)?.color != newColor) {
                        button.setBackgroundColor(newColor)
                    }
                }
            }
            
            Log.d(TAG, "Clavier mis √† jour - Mode majuscule: $isCapitalMode, Caps Lock: $isCapsLock")
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la mise √† jour du clavier", e)
        } finally {
            isUpdatingKeyboard = false
        }
    }
    
    private fun createKeyboardLayout(mainLayout: LinearLayout) {
        // Sauvegarder la r√©f√©rence aux suggestions AVANT suppression
        val savedSuggestionsView = suggestionsView
        val savedSuggestionsViewId = suggestionsViewId
        
        // Supprimer les rang√©es existantes (garder titre et suggestions)
        val childCount = mainLayout.childCount
        for (i in childCount - 1 downTo 2) { // Garder les 2 premiers enfants (titre + suggestions)
            mainLayout.removeViewAt(i)
        }
        
        // Restaurer la r√©f√©rence aux suggestions apr√®s suppression
        if (savedSuggestionsView != null && savedSuggestionsViewId != View.NO_ID) {
            suggestionsView = savedSuggestionsView
            suggestionsViewId = savedSuggestionsViewId
            Log.d(TAG, "R√©f√©rence suggestionsView restaur√©e: ${suggestionsView != null}")
        } else {
            // Fallback : chercher dans la hi√©rarchie
            if (mainLayout.childCount > 1) {
                val suggestionsContainer = mainLayout.getChildAt(1) as? HorizontalScrollView
                suggestionsView = suggestionsContainer?.getChildAt(0) as? LinearLayout
                if (suggestionsView != null) {
                    suggestionsViewId = suggestionsView!!.id
                }
                Log.d(TAG, "R√©f√©rence suggestionsView trouv√©e par fallback: ${suggestionsView != null}")
            }
        }
        
        if (isNumericMode) {
            // Mode num√©rique
            val row1 = createKeyboardRow(arrayOf("1", "2", "3", "4", "5", "6", "7", "8", "9", "0"))
            mainLayout.addView(row1)
            
            val row2 = createKeyboardRow(arrayOf("@", "#", "$", "%", "&", "-", "+", "(", ")", "/"))
            mainLayout.addView(row2)
            
            val row3 = createKeyboardRow(arrayOf("*", "\"", "'", ":", ";", "!", "?", "‚å´"))
            mainLayout.addView(row3)
            
            val row4 = createKeyboardRow(arrayOf("ABC", ",", "ESPACE", ".", "‚èé"))
            mainLayout.addView(row4)
        } else {
            // Mode alphab√©tique AZERTY
            val row1 = createKeyboardRow(arrayOf("a", "z", "e", "r", "t", "y", "u", "i", "o", "p"))
            mainLayout.addView(row1)
            
            val row2 = createKeyboardRow(arrayOf("q", "s", "d", "f", "g", "h", "j", "k", "l", "m"))
            mainLayout.addView(row2)
            
            val row3 = createKeyboardRow(arrayOf("‚áß", "w", "x", "c", "v", "b", "n", "‚å´"))
            mainLayout.addView(row3)
            
            val row4 = createKeyboardRow(arrayOf("123", "ESPACE", "‚èé"))
            mainLayout.addView(row4)
        }
        
        // Rafra√Æchir les suggestions apr√®s reconstruction
        Log.d(TAG, "Reconstruction du clavier termin√©e, suggestionsView: ${suggestionsView != null}")
    }
    
    private fun switchKeyboardMode() {
        Log.d(TAG, "Basculement de mode - Actuel: ${if (isNumericMode) "Num√©rique" else "Alphab√©tique"}")
        
        isNumericMode = !isNumericMode
        
        // R√©initialiser le mode majuscule en passant au mode num√©rique
        if (isNumericMode) {
            isCapitalMode = false
            isCapsLock = false
            currentWord = "" // R√©initialiser le mot en cours
        }
        
        // Recr√©er le clavier avec le nouveau mode
        val currentView = mainKeyboardLayout
        if (currentView != null) {
            keyboardButtons.clear() // Nettoyer la liste des boutons
            createKeyboardLayout(currentView)
            updateKeyboardDisplay()
            
            // Forcer la mise √† jour des suggestions apr√®s reconstruction
            Handler(Looper.getMainLooper()).post {
                Log.d(TAG, "Post-reconstruction: suggestionsView = ${suggestionsView != null}")
                if (!isNumericMode) {
                    // Mode alphab√©tique - restaurer les suggestions
                    updateSuggestions(currentWord)
                    Log.d(TAG, "Suggestions restaur√©es pour mode alphab√©tique avec mot: '$currentWord'")
                } else {
                    // Mode num√©rique - vider les suggestions
                    updateSuggestions("")
                    Log.d(TAG, "Suggestions vid√©es pour mode num√©rique")
                }
            }
        }
        
        Log.d(TAG, "Mode bascul√© vers: ${if (isNumericMode) "Num√©rique" else "Alphab√©tique"}")
    }
    
    private fun startLongPressTimer(key: String, button: Button) {
        longPressRunnable = Runnable {
            isLongPressTriggered = true
            showAccentPopup(key, button)
        }
        longPressHandler.postDelayed(longPressRunnable!!, 500) // 500ms pour d√©clencher l'appui long
    }
    
    private fun cancelLongPress() {
        longPressRunnable?.let {
            longPressHandler.removeCallbacks(it)
        }
        longPressRunnable = null
    }
    
    private fun showAccentPopup(baseKey: String, anchorButton: Button) {
        val accents = accentMap[baseKey.uppercase()] ?: return
        
        Log.d(TAG, "Affichage popup accents pour $baseKey: ${accents.joinToString()}")
        
        // Cr√©er un layout horizontal pour les accents
        val popupLayout = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            setBackgroundColor(Color.WHITE)
            setPadding(8, 8, 8, 8)
        }
        
        // Ajouter la lettre de base en premier
        val baseButton = Button(this).apply {
            text = baseKey.lowercase()
            textSize = 18f
            setBackgroundColor(Color.LTGRAY)
            setTextColor(Color.BLACK)
            setPadding(16, 12, 16, 12)
            setOnClickListener {
                handleKeyPress(baseKey)
                dismissAccentPopup()
            }
        }
        popupLayout.addView(baseButton)
        
        // Ajouter les accents
        accents.forEach { accent ->
            val accentButton = Button(this).apply {
                text = accent
                textSize = 18f
                setBackgroundColor(Color.parseColor("#E3F2FD")) // Bleu tr√®s clair
                setTextColor(Color.parseColor("#1976D2")) // Bleu fonc√©
                setPadding(16, 12, 16, 12)
                setOnClickListener {
                    handleAccentSelection(accent)
                    dismissAccentPopup()
                }
            }
            popupLayout.addView(accentButton)
        }
        
        // Cr√©er et afficher le popup
        currentAccentPopup = PopupWindow(
            popupLayout,
            ViewGroup.LayoutParams.WRAP_CONTENT,
            ViewGroup.LayoutParams.WRAP_CONTENT,
            true
        ).apply {
            elevation = 8f
            showAsDropDown(anchorButton, 0, -anchorButton.height - 20)
        }
    }
    
    private var currentAccentPopup: PopupWindow? = null
    
    private fun dismissAccentPopup() {
        currentAccentPopup?.dismiss()
        currentAccentPopup = null
    }
    
    private fun handleAccentSelection(accent: String) {
        Log.d(TAG, "Accent s√©lectionn√©: $accent")
        
        val inputConnection = currentInputConnection
        if (inputConnection != null) {
            // Appliquer le mode majuscule/minuscule √† l'accent si n√©cessaire
            val finalAccent = if (isCapitalMode || isCapsLock) {
                accent.uppercase()
            } else {
                accent.lowercase()
            }
            
            inputConnection.commitText(finalAccent, 1)
            currentWord += finalAccent
            Log.d(TAG, "Mot actuel apr√®s accent: '$currentWord' (longueur: ${currentWord.length})")
            Log.d(TAG, "Caract√®res dans currentWord: ${currentWord.map { it.code }.joinToString(",")}")
            updateSuggestions(currentWord)
            
            // D√©sactiver le mode majuscule apr√®s un accent (sauf si Caps Lock)
            if (isCapitalMode && !isCapsLock) {
                isCapitalMode = false
                // Post la mise √† jour pour √©viter les conflits
                Handler(Looper.getMainLooper()).post {
                    updateKeyboardDisplay()
                }
            }
        } else {
            Log.w(TAG, "InputConnection est null lors de la s√©lection d'accent !")
        }
    }
    
    private fun handleKeyPress(key: String) {
        Log.d(TAG, "Touche press√©e: $key")
        
        val inputConnection = currentInputConnection
        if (inputConnection != null) {
            when (key) {
                "‚å´" -> {
                    // Gestion du backspace
                    inputConnection.deleteSurroundingText(1, 0)
                    if (currentWord.isNotEmpty()) {
                        currentWord = currentWord.dropLast(1)
                        Log.d(TAG, "Backspace - Mot apr√®s effacement: '$currentWord'")
                        updateSuggestions(currentWord)
                    } else {
                        // Si currentWord est d√©j√† vide, r√©initialiser avec suggestions par d√©faut
                        Log.d(TAG, "Backspace - Mot vide, affichage suggestions par d√©faut")
                        updateSuggestions("")
                    }
                }
                "‚èé" -> {
                    // Touche Entr√©e
                    inputConnection.sendKeyEvent(
                        android.view.KeyEvent(
                            android.view.KeyEvent.ACTION_DOWN,
                            android.view.KeyEvent.KEYCODE_ENTER
                        )
                    )
                    inputConnection.sendKeyEvent(
                        android.view.KeyEvent(
                            android.view.KeyEvent.ACTION_UP,
                            android.view.KeyEvent.KEYCODE_ENTER
                        )
                    )
                    currentWord = ""
                    updateSuggestions("")
                }
                "ESPACE" -> {
                    // Espace termine le mot actuel
                    inputConnection.commitText(" ", 1)
                    currentWord = ""
                    updateSuggestions("")
                }
                "123" -> {
                    // Basculer vers le mode num√©rique
                    switchKeyboardMode()
                }
                "ABC" -> {
                    // Basculer vers le mode alphab√©tique
                    switchKeyboardMode()
                }
                "‚áß" -> {
                    // Gestion de la touche Shift (seulement en mode alphab√©tique)
                    if (!isNumericMode) {
                        handleShiftPress()
                    }
                }
                else -> {
                    if (isNumericMode) {
                        // Mode num√©rique - ins√©rer chiffres et symboles directement
                        inputConnection.commitText(key, 1)
                        // En mode num√©rique, on ne fait pas de suggestions de mots
                        Log.d(TAG, "Caract√®re num√©rique/symbole ins√©r√©: $key")
                    } else {
                        // Mode alphab√©tique - appliquer le mode majuscule/minuscule
                        val textToInsert = if (isCapitalMode || isCapsLock) {
                            key.uppercase()
                        } else {
                            key.lowercase()
                        }
                        
                        inputConnection.commitText(textToInsert, 1)
                        currentWord += textToInsert
                        // R√©duire les logs pour √©viter le spam
                        if (currentWord.length <= 3) { // Log seulement pour les premiers caract√®res
                            Log.d(TAG, "Mot actuel: '$currentWord'")
                        }
                        updateSuggestions(currentWord)
                        
                        // D√©sactiver le mode majuscule apr√®s une lettre (sauf si Caps Lock)
                        if (isCapitalMode && !isCapsLock) {
                            isCapitalMode = false
                            // Post la mise √† jour pour √©viter les conflits
                            Handler(Looper.getMainLooper()).post {
                                updateKeyboardDisplay()
                            }
                        }
                    }
                }
            }
        } else {
            Log.w(TAG, "InputConnection est null !")
        }
    }
    
    private fun handleShiftPress() {
        Log.d(TAG, "Touche Shift press√©e - Mode actuel: Capital=$isCapitalMode, CapsLock=$isCapsLock")
        
        val previousCapitalMode = isCapitalMode
        val previousCapsLock = isCapsLock
        
        when {
            isCapsLock -> {
                // D√©j√† en Caps Lock, d√©sactiver compl√®tement
                isCapsLock = false
                isCapitalMode = false
                Log.d(TAG, "Caps Lock d√©sactiv√©")
            }
            isCapitalMode -> {
                // D√©j√† en mode majuscule, activer Caps Lock
                isCapsLock = true
                isCapitalMode = false
                Log.d(TAG, "Caps Lock activ√©")
            }
            else -> {
                // Mode normal, activer mode majuscule
                isCapitalMode = true
                isCapsLock = false
                Log.d(TAG, "Mode majuscule activ√©")
            }
        }
        
        // Mettre √† jour seulement si l'√©tat a chang√©
        if (previousCapitalMode != isCapitalMode || previousCapsLock != isCapsLock) {
            // Post la mise √† jour pour √©viter les conflits
            Handler(Looper.getMainLooper()).post {
                updateKeyboardDisplay()
            }
        }
    }
}
