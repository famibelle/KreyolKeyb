package com.example.kreyolkeyboard

import android.inputmethodservice.InputMethodService
import android.text.InputType
import android.util.Log
import android.view.KeyEvent
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputConnection
import com.example.kreyolkeyboard.gamification.WordCommitListener

/**
 * Processeur d'entr√©es pour le clavier cr√©ole
 * G√®re le traitement des touches, les modes de saisie et les interactions avec l'√©diteur
 */
class InputProcessor(private val inputMethodService: InputMethodService) {
    
    companion object {
        private const val TAG = "InputProcessor"
    }
    
    // √âtat du processeur
    private var currentWord = ""
    private var isCapitalMode = false
    private var isCapsLock = false
    private var isNumericMode = false
    
    // Callbacks
    interface InputProcessorListener {
        fun onWordChanged(word: String)
        fun onWordCompleted(word: String)
        fun onModeChanged(isNumeric: Boolean, isCapital: Boolean, isCapsLock: Boolean)
        fun onSpecialKeyPressed(key: String)
    }
    
    private var processorListener: InputProcessorListener? = null
    private var wordCommitListener: WordCommitListener? = null  // üéÆ Gamification: Tracking des mots
    
    fun setInputProcessorListener(listener: InputProcessorListener) {
        this.processorListener = listener
    }
    
    /**
     * üéÆ Gamification: D√©finit le listener pour le tracking des mots committ√©s
     */
    fun setWordCommitListener(listener: WordCommitListener) {
        this.wordCommitListener = listener
    }
    
    /**
     * Traite une pression de touche
     */
    fun processKeyPress(key: String): Boolean {
        Log.d(TAG, "processKeyPress appel√© avec: '$key'")
        val inputConnection = inputMethodService.currentInputConnection ?: return false
        
        return when (key) {
            "‚å´" -> {
                Log.d(TAG, "Handling backspace")
                handleBackspace(inputConnection)
            }
            "‚èé" -> {
                Log.d(TAG, "Handling enter")
                handleEnter(inputConnection)
            }
            "‚áß" -> {
                Log.d(TAG, "Handling shift")
                handleShift()
            }
            "123", "ABC" -> {
                Log.d(TAG, "Handling mode switch")
                handleModeSwitch()
            }
            " " -> {
                Log.d(TAG, "Handling space")
                handleSpace(inputConnection)
            }
            else -> {
                Log.d(TAG, "Handling character input: '$key'")
                handleCharacterInput(key, inputConnection)
            }
        }
    }
    
    /**
     * Traite l'entr√©e d'un caract√®re normal
     */
    private fun handleCharacterInput(key: String, inputConnection: InputConnection): Boolean {
        val character = if (shouldCapitalize()) {
            key.uppercase()
        } else {
            key.lowercase()
        }
        
        // Ajouter le caract√®re au mot courant
        if (character.matches(Regex("[a-zA-Z√†√°√¢√£√§√•√®√©√™√´√¨√≠√Æ√Ø√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√ø√±√ßƒâƒùƒ•ƒµ≈ù≈≠]"))) {
            currentWord += character
            Log.d(TAG, "Caract√®re '$character' ajout√©, mot courant: '$currentWord'")
            processorListener?.onWordChanged(currentWord)
            Log.d(TAG, "onWordChanged appel√© avec: '$currentWord'")
        } else {
            // Caract√®re non alphab√©tique - finaliser le mot courant
            Log.d(TAG, "Caract√®re '$character' non alphab√©tique - finalisation du mot")
            finalizeCurrentWord()
        }
        
        // Envoyer le caract√®re √† l'√©diteur
        inputConnection.commitText(character, 1)
        
        // G√©rer la capitalisation automatique
        handleAutoCapitalization()
        
        Log.d(TAG, "Caract√®re trait√©: '$character', mot courant: '$currentWord'")
        return true
    }
    
    /**
     * Traite la touche Retour arri√®re
     */
    private fun handleBackspace(inputConnection: InputConnection): Boolean {
        // Supprimer le caract√®re pr√©c√©dent dans l'√©diteur
        val deleted = inputConnection.deleteSurroundingText(1, 0)
        
        // Mettre √† jour le mot courant
        if (currentWord.isNotEmpty()) {
            currentWord = currentWord.dropLast(1)
            processorListener?.onWordChanged(currentWord)
        }
        
        Log.d(TAG, "Backspace trait√©, mot courant: '$currentWord'")
        return true
    }
    
    /**
     * Traite la touche Entr√©e
     */
    private fun handleEnter(inputConnection: InputConnection): Boolean {
        Log.d(TAG, "üîµ === DEBUT handleEnter() ===")
        finalizeCurrentWord()
        Log.d(TAG, "üîµ Mot finalis√©")
        
        // D√©terminer le type d'action selon le contexte
        val editorInfo = inputMethodService.currentInputEditorInfo
        val imeAction = editorInfo?.imeOptions?.and(EditorInfo.IME_MASK_ACTION)
        
        Log.d(TAG, "üîµ EditorInfo: $editorInfo")
        Log.d(TAG, "üîµ IME Action d√©tect√©e: $imeAction")
        
        when (imeAction) {
            EditorInfo.IME_ACTION_SEND -> {
                Log.d(TAG, "üîµ ‚Üí Action SEND - Envoi du message")
                inputConnection.performEditorAction(EditorInfo.IME_ACTION_SEND)
                Log.d(TAG, "üîµ ‚Üí performEditorAction(SEND) ex√©cut√©")
            }
            EditorInfo.IME_ACTION_SEARCH -> {
                Log.d(TAG, "üîµ ‚Üí Action SEARCH - Recherche")
                inputConnection.performEditorAction(EditorInfo.IME_ACTION_SEARCH)
                Log.d(TAG, "üîµ ‚Üí performEditorAction(SEARCH) ex√©cut√©")
            }
            EditorInfo.IME_ACTION_GO -> {
                Log.d(TAG, "üîµ ‚Üí Action GO")
                inputConnection.performEditorAction(EditorInfo.IME_ACTION_GO)
                Log.d(TAG, "üîµ ‚Üí performEditorAction(GO) ex√©cut√©")
            }
            EditorInfo.IME_ACTION_NEXT -> {
                Log.d(TAG, "üîµ ‚Üí Action NEXT - Champ suivant")
                inputConnection.performEditorAction(EditorInfo.IME_ACTION_NEXT)
                Log.d(TAG, "üîµ ‚Üí performEditorAction(NEXT) ex√©cut√©")
            }
            EditorInfo.IME_ACTION_DONE -> {
                Log.d(TAG, "üîµ ‚Üí Action DONE - Termin√©")
                inputConnection.performEditorAction(EditorInfo.IME_ACTION_DONE)
                Log.d(TAG, "üîµ ‚Üí performEditorAction(DONE) ex√©cut√©")
            }
            else -> {
                Log.d(TAG, "üîµ ‚Üí Action PAR D√âFAUT - Nouvelle ligne")
                // Action par d√©faut - nouvelle ligne
                inputConnection.commitText("\n", 1)
                Log.d(TAG, "üîµ ‚Üí Nouvelle ligne ins√©r√©e")
            }
        }
        
        Log.d(TAG, "üîµ Notification listener touche sp√©ciale")
        processorListener?.onSpecialKeyPressed("‚èé")
        Log.d(TAG, "üîµ === FIN handleEnter() ===")
        return true
    }
    
    /**
     * Traite la touche Majuscule
     */
    private fun handleShift(): Boolean {
        Log.e("SHIFT_REAL_DEBUG", "üö®üö®üö® HANDLESHIFT CALLED IN INPUTPROCESSOR! üö®üö®üö®")
        when {
            !isCapitalMode && !isCapsLock -> {
                // Premi√®re pression - majuscule simple
                isCapitalMode = true
                isCapsLock = false
                Log.e("SHIFT_REAL_DEBUG", "üö® MODE: CAPITAL SIMPLE")
            }
            isCapitalMode && !isCapsLock -> {
                // Deuxi√®me pression - verrouillage majuscule
                isCapitalMode = true
                isCapsLock = true
                Log.e("SHIFT_REAL_DEBUG", "üö® MODE: CAPS LOCK")
            }
            else -> {
                // Troisi√®me pression - retour normal
                isCapitalMode = false
                isCapsLock = false
                Log.e("SHIFT_REAL_DEBUG", "üö® MODE: NORMAL")
            }
        }
        
        Log.e("SHIFT_REAL_DEBUG", "üö® Calling processorListener?.onModeChanged()")
        processorListener?.onModeChanged(isNumericMode, isCapitalMode, isCapsLock)
        Log.d(TAG, "Shift trait√© - Capital: $isCapitalMode, CapsLock: $isCapsLock")
        return true
    }
    
    /**
     * Traite le changement de mode (123/ABC)
     */
    private fun handleModeSwitch(): Boolean {
        isNumericMode = !isNumericMode
        processorListener?.onModeChanged(isNumericMode, isCapitalMode, isCapsLock)
        
        Log.d(TAG, "Mode chang√© - Num√©rique: $isNumericMode")
        return true
    }
    
    /**
     * Traite la barre d'espace
     */
    private fun handleSpace(inputConnection: InputConnection): Boolean {
        finalizeCurrentWord()
        inputConnection.commitText(" ", 1)
        
        // Activer la capitalisation automatique apr√®s certains signes
        handleAutoCapitalization()
        
        return true
    }
    
    /**
     * üåê Traite l'appui long sur la barre d'espace
     * Utilis√© pour changer de clavier IME
     * 
     * @return true pour indiquer qu'il faut changer de clavier
     */
    fun processSpaceLongPress(): Boolean {
        Log.d(TAG, "üåê Appui long sur barre d'espace d√©tect√©")
        // Ne pas finaliser le mot courant (contrairement √† l'espace court)
        // L'utilisateur veut juste changer de clavier, pas terminer sa saisie
        return true
    }
    
    /**
     * Traite la s√©lection d'une suggestion
     */
    fun processSuggestionSelection(suggestion: String): Boolean {
        val inputConnection = inputMethodService.currentInputConnection ?: return false
        
        // Supprimer le mot partiel actuel
        if (currentWord.isNotEmpty()) {
            inputConnection.deleteSurroundingText(currentWord.length, 0)
        }
        
        // üî• CORRECTION BUG CASSE : Pr√©server la casse intentionnelle
        val finalSuggestion = applyCaseToSuggestion(suggestion, currentWord)
        Log.d(TAG, "Casse pr√©serv√©e dans InputProcessor: '$currentWord' -> '$finalSuggestion'")
        
        // Ins√©rer la suggestion avec un espace automatique
        inputConnection.commitText("$finalSuggestion ", 1)
        
        // Finaliser le mot (le tracking se fera dans finalizeCurrentWord)
        currentWord = finalSuggestion
        finalizeCurrentWord()
        
        // G√©rer la capitalisation automatique apr√®s l'espace
        handleAutoCapitalization()
        
        Log.d(TAG, "Suggestion s√©lectionn√©e: '$finalSuggestion' (avec espace automatique)")
        return true
    }
    
    /**
     * üî• CORRECTION BUG CASSE : Applique la casse intentionnelle de l'utilisateur √† la suggestion
     * Pr√©serve la majuscule intentionnelle (Shift/Caps) lors de l'application des suggestions
     */
    private fun applyCaseToSuggestion(suggestion: String, currentInput: String): String {
        if (suggestion.isEmpty() || currentInput.isEmpty()) {
            return suggestion
        }
        
        // Analyser la casse du premier caract√®re tap√© par l'utilisateur
        val firstInputChar = currentInput.first()
        val isIntentionalCapital = firstInputChar.isUpperCase()
        
        Log.d(TAG, "üîç Analyse casse InputProcessor: input='$currentInput', premier char='$firstInputChar', majuscule intentionnelle=$isIntentionalCapital")
        
        return if (isIntentionalCapital) {
            // L'utilisateur a volontairement commenc√© en majuscule ‚Üí capitaliser la suggestion
            suggestion.lowercase().replaceFirstChar { it.uppercase() }
        } else {
            // L'utilisateur a tap√© en minuscule ‚Üí garder la suggestion en minuscule
            suggestion.lowercase()
        }
    }
    
    /**
     * Finalise le mot courant
     */
    private fun finalizeCurrentWord() {
        if (currentWord.isNotEmpty()) {
            processorListener?.onWordCompleted(currentWord)
            
            // üéÆ Gamification: Notifier le tracking du mot committ√©
            wordCommitListener?.onWordCommitted(currentWord)
            Log.d(TAG, "üéÆ Mot committ√© pour tracking: '$currentWord'")
            
            currentWord = ""
            processorListener?.onWordChanged("")
        }
    }
    
    /**
     * D√©termine si le prochain caract√®re doit √™tre en majuscule
     */
    private fun shouldCapitalize(): Boolean {
        return when {
            isCapsLock -> true
            isCapitalMode -> true
            shouldAutoCapitalize() -> true
            else -> false
        }
    }
    
    /**
     * D√©termine si la capitalisation automatique doit s'appliquer
     */
    private fun shouldAutoCapitalize(): Boolean {
        val inputConnection = inputMethodService.currentInputConnection ?: return false
        
        // V√©rifier le contexte de l'√©diteur
        val editorInfo = inputMethodService.currentInputEditorInfo ?: return false
        val inputType = editorInfo.inputType
        
        // Pas de capitalisation automatique en mode mot de passe ou num√©rique
        if (inputType and InputType.TYPE_TEXT_VARIATION_PASSWORD != 0 ||
            inputType and InputType.TYPE_CLASS_NUMBER != 0) {
            return false
        }
        
        // Obtenir le texte pr√©c√©dent pour d√©tecter le d√©but de phrase
        try {
            val textBefore = inputConnection.getTextBeforeCursor(100, 0)?.toString() ?: ""
            
            // Capitaliser au d√©but du texte
            if (textBefore.isEmpty() || textBefore.isBlank()) {
                return true
            }
            
            // Capitaliser apr√®s un point, un point d'exclamation ou d'interrogation
            val lastSentenceEnd = textBefore.indexOfLast { it in ".!?" }
            if (lastSentenceEnd != -1) {
                val afterPunctuation = textBefore.substring(lastSentenceEnd + 1)
                if (afterPunctuation.isBlank()) {
                    return true
                }
            }
            
        } catch (e: Exception) {
            Log.w(TAG, "Erreur lors de la v√©rification de la capitalisation automatique: ${e.message}")
        }
        
        return false
    }
    
    /**
     * G√®re la capitalisation automatique apr√®s certains √©v√©nements
     */
    private fun handleAutoCapitalization() {
        if (shouldAutoCapitalize()) {
            isCapitalMode = true
            processorListener?.onModeChanged(isNumericMode, isCapitalMode, isCapsLock)
        } else if (isCapitalMode && !isCapsLock) {
            // D√©sactiver la majuscule simple apr√®s utilisation
            isCapitalMode = false
            processorListener?.onModeChanged(isNumericMode, isCapitalMode, isCapsLock)
        }
    }
    
    /**
     * Traite les √©v√©nements de touches syst√®me
     */
    fun processSystemKey(keyCode: Int, keyEvent: KeyEvent): Boolean {
        return when (keyCode) {
            KeyEvent.KEYCODE_DEL -> {
                if (keyEvent.action == KeyEvent.ACTION_DOWN) {
                    val inputConnection = inputMethodService.currentInputConnection
                    inputConnection?.let { handleBackspace(it) } ?: false
                } else false
            }
            KeyEvent.KEYCODE_ENTER -> {
                if (keyEvent.action == KeyEvent.ACTION_DOWN) {
                    val inputConnection = inputMethodService.currentInputConnection
                    inputConnection?.let { handleEnter(it) } ?: false
                } else false
            }
            else -> false
        }
    }
    
    /**
     * R√©initialise l'√©tat du processeur
     */
    fun resetState() {
        currentWord = ""
        isCapitalMode = false
        isCapsLock = false
        // Ne pas r√©initialiser isNumericMode pour conserver le mode choisi
        
        processorListener?.onWordChanged("")
        processorListener?.onModeChanged(isNumericMode, isCapitalMode, isCapsLock)
    }
    
    /**
     * Met √† jour le mot courant (utilis√© par les suggestions)
     */
    fun setCurrentWord(word: String) {
        currentWord = word
        processorListener?.onWordChanged(word)
    }
    
    /**
     * Met √† jour le mot courant SANS d√©clencher onWordChanged() 
     * Utilis√© pour √©viter les cascades d'√©v√©nements (ex: onAccentSelected)
     */
    fun updateCurrentWordSilently(word: String) {
        currentWord = word
        Log.d(TAG, "updateCurrentWordSilently: '$word' (pas de callback)")
    }
    
    /**
     * Obtient le mot courant
     */
    fun getCurrentWord(): String = currentWord
    
    /**
     * Obtient l'√©tat des modes
     */
    fun getState(): InputState {
        return InputState(
            isCapitalMode = isCapitalMode,
            isCapsLock = isCapsLock,
            isNumericMode = isNumericMode,
            currentWord = currentWord
        )
    }
    
    /**
     * D√©finit l'√©tat des modes
     */
    fun setState(state: InputState) {
        isCapitalMode = state.isCapitalMode
        isCapsLock = state.isCapsLock
        isNumericMode = state.isNumericMode
        currentWord = state.currentWord
        
        processorListener?.onWordChanged(currentWord)
        processorListener?.onModeChanged(isNumericMode, isCapitalMode, isCapsLock)
    }
    
    /**
     * Classe de donn√©es pour l'√©tat du processeur
     */
    data class InputState(
        val isCapitalMode: Boolean = false,
        val isCapsLock: Boolean = false,
        val isNumericMode: Boolean = false,
        val currentWord: String = ""
    )
}
