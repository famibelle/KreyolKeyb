// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.6.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.25' apply false
}

// üìä CONFIGURATION BUILD SCAN¬Æ GRADLE
// ===============================================
buildScan {
    // üìã Acceptation automatique des Terms of Service
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    
    // üì§ Publication automatique des scans
    publishAlways()
    
    // üè∑Ô∏è Tags de base pour tous les builds
    tag 'kreyol-keyboard'
    tag 'potomitan'
    
    // üìä Callback lors de la publication
    buildScanPublished { scan ->
        println "üéØ Build Scan publi√© avec succ√®s !"
        println "üìä URL directe : ${scan.buildScanUri}"
        println "üîç Analyse compl√®te disponible"
    }
    
    // üöÄ Configuration sp√©cifique selon l'environnement
    if (System.getenv('CI') != null) {
        // Tags pour builds CI
        tag 'CI'
        
        // Configuration GitHub Actions
        if (System.getenv('GITHUB_ACTIONS') != null) {
            tag 'github-actions'
            
            // M√©tadonn√©es GitHub
            def githubRef = System.getenv('GITHUB_REF')
            if (githubRef != null) {
                value 'Git branch', githubRef.replace('refs/heads/', '')
            }
            
            def githubActor = System.getenv('GITHUB_ACTOR')
            if (githubActor != null) {
                value 'GitHub Actor', githubActor
            }
            
            def githubSha = System.getenv('GITHUB_SHA')
            if (githubSha != null) {
                value 'Git SHA', githubSha.take(8)
            }
        }
    } else {
        tag 'LOCAL'
        
        // Information utilisateur local
        def username = System.getProperty('user.name')
        if (username != null) {
            value 'Utilisateur', username
        }
    }
}
