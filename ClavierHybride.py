#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Disposition Clavier Cr√©ole Hybride - Bas√©e sur AZERTY
Conserve la disposition AZERTY de base avec optimisations cr√©oles
"""

import json
import pandas as pd
from colorama import init, Fore, Back, Style

# Initialiser colorama
init(autoreset=True)

def generer_disposition_hybride():
    """G√©n√®re une disposition hybride AZERTY + optimisations cr√©oles"""
    
    # Base AZERTY conserv√©e (rang√©es principales)
    azerty_base = {
        'rangee1': ['a', 'z', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],
        'rangee2': ['q', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm'],
        'rangee3': ['w', 'x', 'c', 'v', 'b', 'n', ',', ';', ':', '!']
    }
    
    return azerty_base

def propositions_optimisations_creoles():
    """Propose diff√©rentes optimisations compatibles AZERTY"""
    
    propositions = {
        "Proposition 1: Substitutions Minimales": {
            "description": "Garde 90% d'AZERTY, remplace seulement les caract√®res les moins utilis√©s",
            "changements": {
                'w': '√©',  # W tr√®s rare en fran√ßais ‚Üí √© tr√®s fr√©quent en cr√©ole
                'x': '√®',  # X rare ‚Üí √® cr√©ole
                'q': '√≤',  # Q peu utilis√© ‚Üí √≤ cr√©ole
                ';': '√†',  # Point-virgule ‚Üí √† cr√©ole
                ':': '√¥'   # Deux-points ‚Üí √¥ cr√©ole
            },
            "avantages": ["Apprentissage minimal", "Muscle memory pr√©serv√©e", "Transition douce"],
            "inconv√©nients": ["Optimisation limit√©e", "Caract√®res cr√©oles en positions sous-optimales"]
        },
        
        "Proposition 2: Permutations Intelligentes": {
            "description": "√âchange des caract√®res pour optimiser sans bouleverser",
            "changements": {
                'a': 'a',   # A reste en place (fr√©quent en fran√ßais ET cr√©ole)
                'e': '√©',   # E ‚Üí √â (plus fr√©quent en cr√©ole)
                'z': 'e',   # Z ‚Üí E (Z rare, E fr√©quent)
                'w': '√®',   # W ‚Üí √à
                'x': '√≤',   # X ‚Üí √í
                'q': '√†',   # Q ‚Üí √Ä
                ';': '√¥'    # ; ‚Üí √î
            },
            "avantages": ["Optimisation significative", "√â en position accessible", "Logique intuitive"],
            "inconv√©nients": ["Quelques r√©ajustements n√©cessaires"]
        },
        
        "Proposition 3: Zone Cr√©ole D√©di√©e": {
            "description": "Cr√©e une 'zone cr√©ole' sur la partie droite du clavier",
            "changements": {
                'p': '√©',   # P ‚Üí √â (position excellente, main droite)
                'm': '√®',   # M ‚Üí √à (accessible, main droite)
                '!': '√≤',   # ! ‚Üí √í
                ':': '√†',   # : ‚Üí √Ä
                ';': '√¥'    # ; ‚Üí √î
            },
            "avantages": ["Concentration des accents", "Main droite sp√©cialis√©e", "Logique g√©ographique"],
            "inconv√©nients": ["P et M d√©plac√©s (fr√©quents en fran√ßais)"]
        }
    }
    
    return propositions

def afficher_proposition(nom, prop):
    """Affiche une proposition de mani√®re claire"""
    
    print(f"\n{Fore.CYAN}{Style.BRIGHT}{'='*60}")
    print(f"{nom}")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    print(f"\n{Fore.GREEN}{Style.BRIGHT}üìã DESCRIPTION:{Style.RESET_ALL}")
    print(f"   {prop['description']}")
    
    print(f"\n{Fore.YELLOW}{Style.BRIGHT}üîÑ CHANGEMENTS:{Style.RESET_ALL}")
    for ancien, nouveau in prop['changements'].items():
        if ancien != nouveau:
            print(f"   {ancien} ‚Üí {Fore.YELLOW}{Style.BRIGHT}{nouveau}{Style.RESET_ALL}")
    
    print(f"\n{Fore.GREEN}{Style.BRIGHT}‚úÖ AVANTAGES:{Style.RESET_ALL}")
    for avantage in prop['avantages']:
        print(f"   ‚Ä¢ {avantage}")
    
    print(f"\n{Fore.RED}{Style.BRIGHT}‚ö†Ô∏è  INCONV√âNIENTS:{Style.RESET_ALL}")
    for inconvenient in prop['inconv√©nients']:
        print(f"   ‚Ä¢ {inconvenient}")

def generer_clavier_hybride(changements):
    """G√©n√®re un clavier hybride avec les changements sp√©cifi√©s"""
    
    # Base AZERTY
    clavier = {
        'rangee1': ['a', 'z', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],
        'rangee2': ['q', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm'],
        'rangee3': ['w', 'x', 'c', 'v', 'b', 'n', ',', ';', ':', '!']
    }
    
    # Appliquer les changements
    for rangee_nom, rangee in clavier.items():
        for i, char in enumerate(rangee):
            if char in changements:
                clavier[rangee_nom][i] = changements[char]
    
    return clavier

def afficher_clavier_comparaison(clavier_azerty, clavier_hybride, nom_proposition):
    """Affiche une comparaison visuelle des claviers"""
    
    print(f"\n{Fore.MAGENTA}{Style.BRIGHT}üéπ COMPARAISON: AZERTY vs {nom_proposition}{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}{'‚îÄ'*70}{Style.RESET_ALL}")
    
    # AZERTY original
    print(f"\n{Fore.BLUE}{Style.BRIGHT}üìå AZERTY ORIGINAL:{Style.RESET_ALL}")
    for i, (rangee_nom, rangee) in enumerate(clavier_azerty.items(), 1):
        print(f"Rang√©e {i}: {' '.join([f'{char:^3}' for char in rangee])}")
    
    # Clavier hybride
    print(f"\n{Fore.GREEN}{Style.BRIGHT}üå¥ CLAVIER CR√âOLE HYBRIDE:{Style.RESET_ALL}")
    for i, (rangee_nom, rangee) in enumerate(clavier_hybride.items(), 1):
        chars_formatted = []
        for char in rangee:
            if char in ['√©', '√®', '√≤', '√†', '√¥']:
                chars_formatted.append(f"{Back.YELLOW}{Fore.BLACK}{char:^3}{Style.RESET_ALL}")
            else:
                chars_formatted.append(f'{char:^3}')
        print(f"Rang√©e {i}: {' '.join(chars_formatted)}")

def calculer_score_compatibilite(changements):
    """Calcule un score de compatibilit√© avec AZERTY"""
    
    # Caract√®res AZERTY par fr√©quence d'usage (approximatif)
    freq_francais = {
        'e': 10, 'a': 9, 's': 8, 'i': 8, 't': 7, 'n': 7, 'r': 6, 'u': 6, 'l': 5, 'o': 5,
        'd': 4, 'c': 4, 'm': 3, 'p': 3, 'f': 3, 'h': 3, 'g': 2, 'b': 2, 'v': 2, 'j': 1,
        'k': 1, 'y': 1, 'q': 1, 'w': 1, 'x': 1, 'z': 1
    }
    
    score_impact = 0
    for ancien, nouveau in changements.items():
        if ancien != nouveau and ancien in freq_francais:
            score_impact += freq_francais[ancien]
    
    # Score sur 100 (100 = aucun impact, 0 = impact maximum)
    score_compatibilite = max(0, 100 - score_impact * 2)
    
    return score_compatibilite

def main():
    """Fonction principale"""
    
    print(f"{Fore.MAGENTA}{Style.BRIGHT}")
    print("üéπ PROPOSITIONS CLAVIER CR√âOLE HYBRIDE")
    print("Optimisations compatibles avec AZERTY")
    print("=" * 50)
    print(f"{Style.RESET_ALL}")
    
    # Base AZERTY
    azerty_base = generer_disposition_hybride()
    
    # Obtenir les propositions
    propositions = propositions_optimisations_creoles()
    
    # Afficher chaque proposition
    for nom, prop in propositions.items():
        afficher_proposition(nom, prop)
        
        # G√©n√©rer le clavier hybride
        clavier_hybride = generer_clavier_hybride(prop['changements'])
        
        # Afficher la comparaison
        afficher_clavier_comparaison(azerty_base, clavier_hybride, nom.split(':')[0])
        
        # Score de compatibilit√©
        score = calculer_score_compatibilite(prop['changements'])
        print(f"\n{Fore.CYAN}{Style.BRIGHT}üìä SCORE COMPATIBILIT√â AZERTY: {score}/100{Style.RESET_ALL}")
        
        # Nombre de changements
        nb_changements = len([c for a, c in prop['changements'].items() if a != c])
        print(f"{Fore.CYAN}üî¢ NOMBRE DE CHANGEMENTS: {nb_changements}{Style.RESET_ALL}")
        
        print(f"\n{Fore.YELLOW}{'‚îÄ'*70}{Style.RESET_ALL}")
    
    # Recommandation
    print(f"\n{Fore.GREEN}{Style.BRIGHT}üéØ RECOMMANDATION:{Style.RESET_ALL}")
    print(f"{Fore.GREEN}Pour un usage bilingue optimal, je recommande la {Style.BRIGHT}Proposition 2{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚Ä¢ Bon √©quilibre optimisation/familiarit√©")
    print(f"‚Ä¢ √â facilement accessible en position E")
    print(f"‚Ä¢ Impact minimal sur la frappe fran√ßaise")
    print(f"‚Ä¢ Transition naturelle pour les bilingues{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
