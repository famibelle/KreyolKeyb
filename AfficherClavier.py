#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Affichage CLI de la Disposition Compl√®te du Clavier Cr√©ole Optimis√©
Interface en ligne de commande pour visualiser le clavier
"""

import json
import pandas as pd
from colorama import init, Fore, Back, Style
import sys
import os

# Initialiser colorama pour Windows
init(autoreset=True)

def charger_donnees():
    """Charge les donn√©es du clavier optimis√©"""
    try:
        with open("disposition_creole_optimisee.json", 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        df_freq = pd.read_csv("frequences_caracteres_creoles.csv")
        freq_dict = dict(zip(df_freq['caractere'], df_freq['frequence']))
        
        return data, freq_dict
    except FileNotFoundError as e:
        print(f"‚ùå Fichier manquant: {e}")
        print("üîÑ Ex√©cutez d'abord DispositionKlavy√©.py pour g√©n√©rer les donn√©es")
        sys.exit(1)

def generer_disposition_complete(freq_dict):
    """G√©n√®re une disposition compl√®te avec tous les caract√®res"""
    
    # Tous les caract√®res √† placer (alphabet + caract√®res cr√©oles + ponctuation)
    tous_caracteres = list('abcdefghijklmnopqrstuvwxyz') + ['√©', '√®', '√≤', '√†', '√¥'] + [' ', '.', ',', ';', '!', '?']
    
    # Trier par fr√©quence d√©croissante
    chars_freq = [(char, freq_dict.get(char, 0)) for char in tous_caracteres if char in freq_dict]
    chars_freq.sort(key=lambda x: x[1], reverse=True)
    
    # Force des doigts (0 = auriculaire gauche, 9 = auriculaire droit)
    force_doigts = {0: 0.5, 1: 0.7, 2: 0.9, 3: 1.0, 4: 1.0, 5: 1.0, 6: 1.0, 7: 0.9, 8: 0.7, 9: 0.5}
    
    # Positions disponibles par doigt (3 rang√©es par doigt)
    positions_doigts = {}
    for doigt in range(10):
        positions_doigts[doigt] = [(doigt, f'rangee{i}') for i in [1, 2, 3]]
    
    # Attribution optimis√©e
    disposition = {}
    positions_utilisees = set()
    
    for char, freq in chars_freq:
        if len(disposition) >= 30:  # Limite √† 30 caract√®res (3 rang√©es √ó 10 doigts)
            break
            
        # Calculer le score pour chaque position disponible
        meilleur_score = float('inf')
        meilleure_position = None
        
        for doigt in range(10):
            for pos_doigt, rangee in positions_doigts[doigt]:
                if (pos_doigt, rangee) not in positions_utilisees:
                    # Score = effort (inverse de la force) √ó fr√©quence
                    effort = (1 / force_doigts[doigt]) * freq
                    
                    # Bonus pour rang√©e du milieu (plus accessible)
                    if rangee == 'rangee2':
                        effort *= 0.8
                    elif rangee == 'rangee3':
                        effort *= 1.1
                    
                    if effort < meilleur_score:
                        meilleur_score = effort
                        meilleure_position = (doigt, pos_doigt, rangee)
        
        if meilleure_position:
            doigt, pos_doigt, rangee = meilleure_position
            disposition[char] = doigt
            positions_utilisees.add((pos_doigt, rangee))
    
    return disposition

def organiser_clavier(disposition, freq_dict):
    """Organise les caract√®res par position de clavier"""
    
    # G√©n√©rer disposition compl√®te si n√©cessaire
    if len(disposition) < 20:  # Si pas assez de caract√®res, g√©n√©rer complet
        disposition = generer_disposition_complete(freq_dict)
    
    # Structure du clavier QWERTY physique
    clavier = {
        'rangee1': ['', '', '', '', '', '', '', '', '', ''],  # Rang√©e du haut
        'rangee2': ['', '', '', '', '', '', '', '', '', ''],  # Rang√©e du milieu  
        'rangee3': ['', '', '', '', '', '', '', '', '', '']   # Rang√©e du bas
    }
    
    # Mapping doigt -> positions sur le clavier avec priorit√© aux rang√©es
    positions_doigts = {
        0: [(0, 'rangee1'), (0, 'rangee2'), (0, 'rangee3')],  # Auriculaire gauche
        1: [(1, 'rangee1'), (1, 'rangee2'), (1, 'rangee3')],  # Annulaire gauche
        2: [(2, 'rangee1'), (2, 'rangee2'), (2, 'rangee3')],  # Majeur gauche
        3: [(3, 'rangee1'), (3, 'rangee2'), (3, 'rangee3')],  # Index gauche
        4: [(4, 'rangee1'), (4, 'rangee2'), (4, 'rangee3')],  # Index gauche √©tendu
        5: [(5, 'rangee1'), (5, 'rangee2'), (5, 'rangee3')],  # Index droit √©tendu
        6: [(6, 'rangee1'), (6, 'rangee2'), (6, 'rangee3')],  # Index droit
        7: [(7, 'rangee1'), (7, 'rangee2'), (7, 'rangee3')],  # Majeur droit
        8: [(8, 'rangee1'), (8, 'rangee2'), (8, 'rangee3')],  # Annulaire droit
        9: [(9, 'rangee1'), (9, 'rangee2'), (9, 'rangee3')]   # Auriculaire droit
    }
    
    # Grouper les caract√®res par doigt
    chars_par_doigt = {}
    for char, doigt in disposition.items():
        if doigt not in chars_par_doigt:
            chars_par_doigt[doigt] = []
        chars_par_doigt[doigt].append(char)
    
    # Trier les caract√®res de chaque doigt par fr√©quence (plus fr√©quent = rang√©e du milieu)
    for doigt in chars_par_doigt:
        chars_par_doigt[doigt].sort(key=lambda x: freq_dict.get(x, 0), reverse=True)
    
    # Placer les caract√®res
    for doigt, chars in chars_par_doigt.items():
        if doigt in positions_doigts:
            for i, char in enumerate(chars):
                if i < len(positions_doigts[doigt]):
                    col, rangee = positions_doigts[doigt][i]
                    clavier[rangee][col] = char
    
    return clavier, disposition

def get_couleur_doigt(doigt):
    """Retourne la couleur pour chaque doigt"""
    couleurs = {
        0: Fore.RED,      # Auriculaire gauche
        1: Fore.YELLOW,   # Annulaire gauche  
        2: Fore.GREEN,    # Majeur gauche
        3: Fore.CYAN,     # Index gauche
        4: Fore.CYAN,     # Index gauche √©tendu
        5: Fore.CYAN,     # Index droit √©tendu
        6: Fore.CYAN,     # Index droit
        7: Fore.GREEN,    # Majeur droit
        8: Fore.YELLOW,   # Annulaire droit
        9: Fore.RED       # Auriculaire droit
    }
    return couleurs.get(doigt, Fore.WHITE)

def afficher_clavier_ascii(clavier, disposition, freq_dict):
    """Affiche le clavier en ASCII art color√©"""
    
    print(f"\n{Fore.MAGENTA}{Style.BRIGHT}{'='*80}")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}üéπ CLAVIER CR√âOLE OPTIMIS√â - DISPOSITION POTOMITAN")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}{'='*80}{Style.RESET_ALL}")
    
    # En-t√™te avec les doigts
    noms_doigts = ['Aur.G', 'Ann.G', 'Maj.G', 'Ind.G', 'Ind.G+', 'Ind.D+', 'Ind.D', 'Maj.D', 'Ann.D', 'Aur.D']
    
    print(f"\n{Fore.BLUE}{Style.BRIGHT}DOIGTS:", end="")
    for i, nom in enumerate(noms_doigts):
        couleur = get_couleur_doigt(i)
        print(f"  {couleur}{nom:^6}", end="")
    print(f"{Style.RESET_ALL}")
    
    # S√©parateur
    print(f"{Fore.BLUE}{'‚îÄ' * 8}" + "‚î¨" + "‚îÄ" * 6 * 10 + "‚îê")
    
    # Afficher chaque rang√©e
    rangees_noms = ['RANG√âE 1', 'RANG√âE 2', 'RANG√âE 3']
    
    for i, (rangee_nom, rangee_key) in enumerate(zip(rangees_noms, ['rangee1', 'rangee2', 'rangee3'])):
        print(f"{Fore.BLUE}{rangee_nom:>7} {Style.BRIGHT}‚îÇ", end="")
        
        for j, char in enumerate(clavier[rangee_key]):
            if char:
                # Trouver le doigt pour la couleur
                doigt = disposition.get(char, -1)
                couleur = get_couleur_doigt(doigt)
                
                # Caract√®res cr√©oles en surbrillance
                if char in ['√©', '√®', '√≤', '√†', '√¥']:
                    print(f"{Back.YELLOW}{Fore.BLACK}{Style.BRIGHT} {char:^4} {Style.RESET_ALL}", end="")
                else:
                    print(f"{couleur}{Style.BRIGHT} {char:^4} {Style.RESET_ALL}", end="")
            else:
                print(f"{Fore.LIGHTBLACK_EX} .... ", end="")
        
        print(f"{Fore.BLUE} ‚îÇ{Style.RESET_ALL}")
    
    # Bas du clavier
    print(f"{Fore.BLUE}{'‚îÄ' * 8}" + "‚î¥" + "‚îÄ" * 6 * 10 + "‚îò{Style.RESET_ALL}")

def afficher_statistiques(stats):
    """Affiche les statistiques de performance"""
    
    print(f"\n{Fore.GREEN}{Style.BRIGHT}üìä STATISTIQUES DE PERFORMANCE{Style.RESET_ALL}")
    print(f"{Fore.GREEN}{'‚îÄ' * 40}{Style.RESET_ALL}")
    
    print(f"{Fore.WHITE}üí™ Am√©lioration globale    : {Fore.GREEN}{Style.BRIGHT}{stats['amelioration_pct']:>6.1f}%{Style.RESET_ALL}")
    print(f"{Fore.WHITE}‚ö° Effort r√©duit          : {Fore.GREEN}{Style.BRIGHT}{(stats['azerty_total'] - stats['optimise_total']):>8,.0f} unit√©s{Style.RESET_ALL}")
    print(f"{Fore.WHITE}üî§ Effort caract√®res      : {Fore.CYAN}{stats['optimise_chars']:>8,.0f} unit√©s{Style.RESET_ALL}")
    print(f"{Fore.WHITE}üîó Effort bigrammes       : {Fore.CYAN}{stats['optimise_bigrammes']:>8,.0f} unit√©s{Style.RESET_ALL}")
    print(f"{Fore.WHITE}üìà Score total optimis√©   : {Fore.GREEN}{Style.BRIGHT}{stats['optimise_total']:>8,.0f} unit√©s{Style.RESET_ALL}")

def afficher_caracteres_creoles(freq_dict):
    """Affiche la liste des caract√®res cr√©oles"""
    
    print(f"\n{Fore.YELLOW}{Style.BRIGHT}üå¥ CARACT√àRES CR√âOLES INT√âGR√âS{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}{'‚îÄ' * 35}{Style.RESET_ALL}")
    
    # Filtrer les caract√®res cr√©oles
    creoles = ['√©', '√®', '√≤', '√†', '√¥']
    
    for char in creoles:
        if char in freq_dict:
            freq = freq_dict[char]
            print(f"{Back.YELLOW}{Fore.BLACK} {char} {Style.RESET_ALL} ‚Üí {Fore.YELLOW}{freq:>6,} occurrences{Style.RESET_ALL}")

def afficher_legende():
    """Affiche la l√©gende des couleurs"""
    
    print(f"\n{Fore.MAGENTA}{Style.BRIGHT}üé® L√âGENDE DES COULEURS{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}{'‚îÄ' * 25}{Style.RESET_ALL}")
    
    legendes = [
        (Fore.CYAN, "Index", "Force maximale, acc√®s rapide"),
        (Fore.GREEN, "Majeur", "Force √©lev√©e, tr√®s accessible"),
        (Fore.YELLOW, "Annulaire", "Force moyenne, utilisation mod√©r√©e"),
        (Fore.RED, "Auriculaire", "Force faible, caract√®res rares"),
        (Back.YELLOW + Fore.BLACK, "Surbrillance", "Caract√®res sp√©cifiques au cr√©ole")
    ]
    
    for couleur, doigt, description in legendes:
        print(f"{couleur}{Style.BRIGHT} ‚óè {doigt:<12}{Style.RESET_ALL} : {description}")

def menu_interactif(data, freq_dict):
    """Menu interactif pour explorer le clavier"""
    
    while True:
        print(f"\n{Fore.BLUE}{Style.BRIGHT}üîç MENU INTERACTIF{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'‚îÄ' * 20}{Style.RESET_ALL}")
        print("1. üéπ Afficher le clavier complet")
        print("2. üìä Voir les statistiques")
        print("3. üå¥ Caract√®res cr√©oles")
        print("4. üé® L√©gende des couleurs")
        print("5. üîç Rechercher un caract√®re")
        print("6. üö™ Quitter")
        
        choix = input(f"\n{Fore.CYAN}Votre choix (1-6): {Style.RESET_ALL}").strip()
        
        if choix == "1":
            clavier, disposition_complete = organiser_clavier(data['character_positions'], freq_dict)
            afficher_clavier_ascii(clavier, disposition_complete, freq_dict)
        elif choix == "2":
            afficher_statistiques(data['stats'])
        elif choix == "3":
            afficher_caracteres_creoles(freq_dict)
        elif choix == "4":
            afficher_legende()
        elif choix == "5":
            clavier, disposition_complete = organiser_clavier(data['character_positions'], freq_dict)
            rechercher_caractere(disposition_complete, freq_dict)
        elif choix == "6":
            print(f"\n{Fore.GREEN}üëã Au revoir ! Bon usage de votre clavier cr√©ole !{Style.RESET_ALL}")
            break
        else:
            print(f"{Fore.RED}‚ùå Choix invalide. Essayez encore.{Style.RESET_ALL}")

def rechercher_caractere(disposition, freq_dict):
    """Recherche et affiche les infos d'un caract√®re"""
    
    char = input(f"\n{Fore.CYAN}Entrez un caract√®re √† rechercher: {Style.RESET_ALL}").strip()
    
    if not char:
        print(f"{Fore.RED}‚ùå Aucun caract√®re saisi.{Style.RESET_ALL}")
        return
    
    # G√©n√©rer disposition compl√®te si n√©cessaire
    if len(disposition) < 20:
        disposition = generer_disposition_complete(freq_dict)
    
    if char in disposition:
        doigt = disposition[char]
        couleur = get_couleur_doigt(doigt)
        freq = freq_dict.get(char, 0)
        
        noms_doigts_complets = {
            0: 'Auriculaire gauche', 1: 'Annulaire gauche', 2: 'Majeur gauche', 3: 'Index gauche', 4: 'Index gauche √©tendu',
            5: 'Index droit √©tendu', 6: 'Index droit', 7: 'Majeur droit', 8: 'Annulaire droit', 9: 'Auriculaire droit'
        }
        
        print(f"\n{Fore.GREEN}üîç R√âSULTAT DE RECHERCHE{Style.RESET_ALL}")
        print(f"{Fore.GREEN}{'‚îÄ' * 25}{Style.RESET_ALL}")
        print(f"Caract√®re      : {couleur}{Style.BRIGHT}{char}{Style.RESET_ALL}")
        print(f"Doigt assign√©  : {couleur}{noms_doigts_complets[doigt]}{Style.RESET_ALL}")
        print(f"Fr√©quence      : {freq:,} occurrences")
        print(f"Type           : {'Cr√©ole' if char in ['√©', '√®', '√≤', '√†', '√¥'] else 'Standard'}")
    else:
        print(f"{Fore.RED}‚ùå Caract√®re '{char}' non trouv√© dans la disposition.{Style.RESET_ALL}")

def main():
    """Fonction principale"""
    
    # V√©rifier si on est en mode interactif ou direct
    if len(sys.argv) > 1 and sys.argv[1] == "--direct":
        mode_direct = True
    else:
        mode_direct = False
    
    try:
        # Charger les donn√©es
        data, freq_dict = charger_donnees()
        
        if mode_direct:
            # Affichage direct complet
            clavier, disposition_complete = organiser_clavier(data['character_positions'], freq_dict)
            afficher_clavier_ascii(clavier, disposition_complete, freq_dict)
            afficher_statistiques(data['stats'])
            afficher_caracteres_creoles(freq_dict)
            afficher_legende()
        else:
            # Mode interactif
            print(f"{Fore.MAGENTA}{Style.BRIGHT}")
            print("üéπ BIENVENUE DANS L'AFFICHEUR DE CLAVIER CR√âOLE OPTIMIS√â")
            print("=" * 60)
            print(f"{Style.RESET_ALL}")
            menu_interactif(data, freq_dict)
            
    except KeyboardInterrupt:
        print(f"\n\n{Fore.YELLOW}üëã Arr√™t demand√© par l'utilisateur.{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Erreur: {e}{Style.RESET_ALL}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
